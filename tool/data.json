[{"last_modified_at":"2022-12-20 10:15:08 +0800","layout":"default","title":"redis-stat","content":"# redis-stat\n## 安装\n\n地址\n\n - [Github地址][1]\n\n - [备用地址][2]\n\n注：请勿在备用地址登录Github\n\n> 使用jar包形式运行 **推荐**\n\n`java -jar redis-stat-0.4.14.jar --help`\n\n\n> 熟悉docker，可以采用docker\n\n`docker run --name redis-stat-dev -p 8080:63790 -d insready/redis-stat --server 172.20.62.117:26380 -a 3edcVFR$`\n\n## 命令参数\n\n```shell\nusage: redis-stat [HOST[:PORT][/PASS] ...] [INTERVAL [COUNT]]\n\n -a, --auth=PASSWORD Password\n -v, --verbose Show more info\n --style=STYLE Output style: unicode|ascii\n --no-color Suppress ANSI color codes\n --csv=OUTPUT_CSV_FILE_PATH Save the result in CSV format\n --es=ELASTICSEARCH_URL Send results to ElasticSearch: [http://]HOST[:PORT][/INDEX]\n\n --server[=PORT] Launch redis-stat web server (default port: 63790)\n --daemon Daemonize redis-stat. Must be used with --server option.\n\n --version Show version\n --help Show this message\n```\n\n## 面板参数\n\n```shell\nused_memory_rss\n\n从操作系统的角度， 返回 Redis 已分配的内存总量（ 俗称常驻集大小） 。 这个值和 top 、 ps 等命令的输出一致， 包含了used_memory和内存碎片。\n\nmem_fragmentation_ratio \n\nused_memory_rss 和 used_memory 之间的比率\n\nblocked_clients\n\n正在等待阻塞命令（BLPOP、BRPOP、BRPOPLPUSH）的客户端的数量\n\nrejected_connections_per_second\n\n 因为每秒最大客户端数量限制而被拒绝的连接请求数量。\n\ntotal_commands_processed_per_ses\n\n服务器已每秒执行的命令数量\n\nexpired_keys_per_second\n\n因为过期而每秒被自动删除的数据库键数量\n\nevicted_keys_per_second\n\n因为最大内存容量限制而每秒被驱逐（evict）的键数量\n\naof_current_size\n\nAOF 文件目前的大小\n\naof_base_size :\n\n服务器启动时或者 AOF 重写最近一次执行之后，AOF 文件的大小\n\nrdb_changes_since_last_save \n\n距离最近一次成功创建持久化文件之后，经过了多少秒\n\npubsub_channels :\n\n目前被订阅的频道数量\n\npubsub_patterns \n\n目前被订阅的模式数量\n\nkeyspace_misses _per_second\n\n查找数据库键每秒失败的次数\n\nkeyspace_hits _per_second\n\n查找数据库键成功的次数\n\nkeyspace_hits_ratio _per_second\n```\n\n## 延伸阅读\n\n[性能问题排查][3]\n\n[1]: https://github.com/junegunn/redis-stat\n[2]: https://hub.nuaa.cf/junegunn/redis-stat\n[3]: https://www.cnblogs.com/mushroom/p/4738170.html","dir":"/tool/","name":"redis-stat.md","path":"tool/redis-stat.md","url":"/tool/redis-stat.html"},{"last_modified_at":"2022-12-20 16:30:26 +0800","layout":"default","title":null,"content":"","dir":"/docs/java/","name":"jedis-pool.md","path":"docs/java/jedis-pool.md","url":"/docs/java/jedis-pool.html"},{"last_modified_at":"2022-12-20 16:30:26 +0800","layout":"default","title":"Markdown","content":"\n# Markdown\n\n​\t\n\n## 目录\n\n一. [概述](#概述)\n\n 1. [核心理念](#核心理念)\n 2. [名词解释](#名词解释)\n 3. [编辑器](#编辑器)\n\n二. [语法](#语法)\n\n1. [标题](#标题)\n2. [文本](#文本)\n3. [字体和线](#字体和线)\n4. [列表](#列表)\n 1. [有序列表](#有序列表)\n 2. [无序列表](#无序列表)\n 3. [复选框列表](#复选框列表)\n5. [表格](#表格)\n6. [链接](#链接)\n 1. [文字链接](#文字链接)\n 2. [图片链接](#图片链接)\n 3. [锚点](#锚点)\n7. [块引用](#块引用)\n8. [代码块](#代码块)\n9. [表情](#表情)\n10. [相关参考](#相关参考)\n\n---\n\n### 写在前面\n\n***\n\n*限于只花了较短时间写Markdown笔记及总结，如有错误及疏漏，欢迎交流。*\n\n\n### 概述\n\n***\n\n#### 核心理念\n\nMarkdown 致力于使阅读和创作文档变得容易。\n\n* 特点：简洁简易\n* 应用场景：叙述，说明，博客，Git，wiki...\n\n#### 名词解释 \n\n*以下两个概念引入HTML标签中的概念，对Markdown中做出的解释*\n\n* 块级元素\n\n >块级元素占据其父元素（容器）的整个空间，因此创建了一个“块”\n >\n >[了解更多][block]\n\n* 内联元素\n\n >一个行内元素只占据它对应标签的边框所包含的空间\n >\n >[了解更多][line]\n\n#### 编辑器\n\n关于编辑器，由于笔者也只是用了较短时间。目前只能给出笔者正在使用的。\n\nMac系统 : [typora][typora]\n\n缺点：HTML语法不能preview ，某些修改需要打开源码格式修改\n\n其他：待机智的你发现\n\n[了解更多][editor]\n\n### 语法\n\n***\n\n#### 标题\n\nMarkdown 支持两种形式的标题, Setext 和 atx.\n\n~~~text\nSetext 样式的标题使用的等号来表示一级标题, 使用连字符表示二级标题. \n[Setext]\nThis is an H1\n=============\n\nThis is an H2\n-------------\nAtx 样式的标题每行开头使用 1-6 井号, 对应 1-6 级标题\n[Atx]\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n~~~\n\n*注：官方还提供如下功能，但实测未生效，待机智的你~*\n~~~text\n可选地, 你可以 \"关闭\" atx 样式的标题. 这纯粹是美化需要 -- 如果你认为这样美观一些就用吧. 关闭标签的井号数量甚至不需要和起始位置的匹配. (起始的井号数量决定了标题的级别.) \n\n# This is an H1 #\n\n## This is an H2 ##\n\n### This is an H3 ######\n~~~\n\n\n\n#### 文本\n\n\n~~~text\n普通文本\n单行文本 行头加入一个tab或4个空格\n~~~\n\n~~~text\n文本块 \n1.在连续几行的文本开头加入1个tab或者4个空格 此种方式只是将每一行拼接为块\n2.块头和块尾 加入一对三个的反引号 推荐 更符合块的定义\n~~~\n\n**文本换行**\n\n```text\n1.上行文本后面补两个空格\n2.两行文本直接加一个空行 该种方式行距较大 已经有点偏向段落 不推荐\n```\n\n第一行 \n第二行 \n\n\n\n#### 字体和线\n\n**文字标签**\n\n~~~text\n文字标签功能使行内部分文字块，使用一对反引号。\n语法：\n`linux`、`markdown`\n~~~\n效果：`linux` `markdown`\n\n**水平线**\n\n```text\n***、---、___可以显示水平线效果\n```\n\n**斜体、粗线、删除线**\n\n| 语法 | 效果 |\n| ---------------------- | -------------------- |\n| `*斜体1*` | *斜体1* |\n| `_斜体_` | _斜体2_ |\n| `**粗体1**` | **粗体1** |\n| `__粗体2__` | __粗体2__ |\n| `~~删除线~~` | ~~删除线~~ |\n| `***斜粗体***` | ***斜粗体*** |\n| `***~~斜粗体删线~~***` | ***~~斜粗体删线~~*** |\n| `~~***斜粗提删线***~~` | ~~***斜粗体删线***~~ |\n| `~~___斜粗体删线___~~` | ~~___斜粗体删线___~~ |\n|备注：斜体、粗体、删除线可混合使用||\n\n\n\n#### 列表\n\n##### 无序列表\n\n`*` `-`\n\n- 昵称\n- 爱好\n - 足球\n - 篮球\n\n##### 有序列表\n\n`数字加点加空格`\n\n面向对象的三个基本特征：\n\n1. 封装\n 1. 巨人的第一道墙壁\n 2. 巨人的第一道墙壁\n 1. 巨人的第二道墙壁\n2. 继承\n3. 多态\n\n*注意：* 此处根据编辑器不同 多层列表符号可能不同\n\n##### 复选框列表\n\n`-[] `\n\n- [ ] 需求分析\n\n`-[x]`\n\n- [x] 选中\n\n#### 表格\n\n```text\n|表头1|表头2|\n|---|---|\n|表格单元|表格单元|\n|:---| 左对齐\n|:---:| 居中\n|---:| 右对齐\n```\n\n| 语法 | 效果 |\n| ------------------------------ | ------------------------ |\n| `|表格单元带~~删除线~~|` | \\|表格单元带~~删除线~~\\| |\n| 注意：单元格可混合其他基本语法 | |\n\n\n\n#### 链接\n\n##### 文字链接\n\n| # | 语法 | 效果 |\n| ---- | ----------------------------------------- | --------------------------------------- |\n| 1 | `[百度](http://www.baidu.com \"悬停显示\")` | [百度](http://www.baidu.com \"悬停显示\") |\n| 2 | `[百度][baidu]` | [百度][baidu] |\n\n语法2由两部分组成:\n\n- 两个中括号,[]里的标识符，markdown文中需定\n\n- 地址是相对路径也可 但不建议\n\n> `[baidu]: https://www.baidu.com`\n>\n> 使用URL标识符能达到复用的目的，一般全文所有URL标识符统一放在文末定义，简洁\n\n##### 图片链接\n\n基本格式\n\n```![alt](URL title)```\n\nalt和title即对应HTML中的Alt和title属性(都可省略):\n\n- alt表示图片显示失败时的替换文本\n- title表示鼠标悬停在图片时的显示文本\n- URL即图片的URL地址 *本地jeklly 测试时不要写localhost*\n\n| # | 语法 | 效果 |\n| ---- | ---------------------------------------------------------- | -------------------------------------------------------- |\n| 1 | `![baidu](http://www.baidu.com/img/bdlogo.gif \"百度logo\")` | ![baidu](http://www.baidu.com/img/bdlogo.gif \"百度logo\") |\n| 2 | `![][foryou]` | ![][foryou] |\n\n***注意：*** 例2写法使用**URL标识符**的形式\n\n> 文中定义[foryou]的路径\n\n```text\n[foryou]:https://github.com/guodongxiaren/ImageCache/raw/master/Logo/foryou.gif\n```\n\n##### 锚点\n\n每个标题即是一个锚点\n\n| 语法 | 效果 |\n| ----------------- | ----------------- |\n| `[回到目录](#目录)` | [回到目录](#目录) |\n\n**注意：**锚点是通过“()”中的索引定位，而链接是通过\"[]\"中的索引定位。\n\n#### 块引用\n\n`>`\n\n**常用场景：常用于引用文本**\n\n​\t《假如生活欺骗了你》是俄国诗人普希金于1825年流放南俄敖德萨同当地总督发生冲突后，被押送到其父亲的领地米哈伊洛夫斯科耶村幽禁期间创作的一首诗歌。诗歌全文表述了一种积极乐观而坚强的人生态度，并且因它亲切和蔼的口气让许多人把它记于自己的笔记本上，成为了激励自己勇往直前，永不放弃的座右铭。\n\n>创作背景： \n>\n>​\t该诗写于1825年，正是普希金流放南俄敖德萨同当地总督发生冲突后，被押送到其父亲的领地米哈伊洛夫斯科耶村幽禁期间所作。从1824年8月至1826年9月，是一段极为孤独寂寞的生活。那时俄国革命如火如荼，诗人却被迫与世隔绝。在这样的处境下，诗人仍没有丧失希望与斗志，他热爱生活，执著地追求理想，相信光明必来，正义必胜。\n\n**块引用多级结构**\n\n> 数据结构\n>\n> > 树\n> >\n> > > 二叉树\n\n#### 代码块\n\n在三个反引号后面加上编程语言的名字，另起一行开始写代码，最后一行加三个反引号\n\n```java\npublic static void main(String[] args){} \n```\n\n~~~php\n<?php echo \"hello world\";\n~~~\n\n**diff语法 **\n\n版本控制的系统中都少不了diff的功能，即展示一个文件内容的增加与删除。\nGFM中可以显示的展示diff效果。使用绿色表示新增，红色表示删除。\n\n其语法与代码高亮类似，只是在三个反引号后面写diff，\n并且其内容中，以 `+ `开头表示新增，`- `开头表示删除。\n\n~~~text\n```diff\n+ 假如生活欺骗了你\n+ 不要悲伤，不要心急\n+ 忧郁的日子里须要镇静：\n+ 相信吧，快乐的日子将会来临！\n+ 心儿永远向往着未来；\n- 现在却常是忧郁。\n```\n~~~\n\n```diff\n+ 假如生活欺骗了你\n+ 不要悲伤，不要心急\n+ 忧郁的日子里须要镇静：\n+ 相信吧，快乐的日子将会来临！\n+ 心儿永远向往着未来；\n- 现在却常是忧郁。\n```\n\n#### 表情\n\nGithub的Markdown语法支持添加emoji表情，输入不同的符号码（两个冒号包围的字符）可以显示出不同的表情。\n\n比如`:blush:` 可以显示 :blush:\n\n更多请查询官方网页[http://www.emoji-cheat-sheet.com](http://www.emoji-cheat-sheet.com)\n\n\n\n### 相关参考 \n\n>1. [Markdown中文文档][MarkdownCN]\n>2. [README文件语法解读][Flavored]\n\n***\n\n\n\n\n\n\n\n[block]:https://developer.mozilla.org/zh-CN/docs/Web/HTML/Block-level_elements \"块级元素\"\n[typora]: https://typora.io/\t\"typora官方\"\n[foryou]: https://github.com/guodongxiaren/ImageCache/raw/master/Logo/foryou.gif\n[editor]: https://www.zhihu.com/question/22700184\t\"Mac markdown editor\"\n[baidu]: Https://www.baidu.com\t\"百度\"\n[MarkdownCN]: https://markdown-zh.readthedocs.io/en/latest/\t\"Markdown CN docs\"\n[Flavored]: https://github.com/guodongxiaren/README\n[line]: https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements\t\"行内元素\"","dir":"/docs/others/","name":"2018-06-03-markdown.markdown","path":"docs/others/2018-06-03-markdown.markdown","url":"/docs/others/2018-06-03-markdown.html"},{"last_modified_at":"2022-12-20 16:30:26 +0800","layout":"default","title":"Jekyll安装","content":"\n\n# Jekyll安装\n## 安装ruby\n\nMac自带的ruby，默认为2.6.0，无法满足要求，需要安装3.0以上版本\n\n ```shell\n brew install ruby\n ```\n\n注：版本号可通过 `ruby -v`查看，若命令无法识别，查看是否在环境变量中配置\n\n## 安装Jekyll\n\n```shell\ngem install jekyll bundler\n```\n\n注：验证gem是否安装正确，可以查看对应目录\n\n```shell\n❯ ls ~/.gem/ruby/\n2.6.0 3.0.0\n❯ ls ~/.gem/ruby/3.0.0/bin\nbundle bundler jekyll\n```\n\n设置环境变量\n\n```\necho `export PATH=$PATH:$HOME/.gem/ruby/3.0.0/bin` ~/.bash_profile\nsource ~/.bash_profile\n```\n\n注：无`.bash_profile`自行创建，或者创建软链到该目录，或者直接切到该目录执行(如果不嫌麻烦)。\n\n## 验证\n\n```shell\n❯ jekyll -v\njekyll 4.3.1\n```\n\n## 可能遇到的问题\n[gem安装扩展失败][1]\n\n[cannot load such file – webrick][2]\n\n注：ruby配置脚本说明\n\n```shell\nruby is keg-only, which means it was not symlinked into /usr/local,\nbecause macOS already provides this software and installing another version in\nparallel can cause all kinds of trouble.\n\nIf you need to have ruby first in your PATH run:\n echo 'export PATH=\"/usr/local/opt/ruby/bin:$PATH\"' >> ~/.bash_profile\n\nFor compilers to find ruby you may need to set: 编译中使用\n export LDFLAGS=\"-L/usr/local/opt/ruby/lib\"\n export CPPFLAGS=\"-I/usr/local/opt/ruby/include\"\n\nFor pkg-config to find ruby you may need to set:\n export PKG_CONFIG_PATH=\"/usr/local/opt/ruby/lib/pkgconfig\"\n```\n\n\n\n[1]:https://hub.nuaa.cf/ffi/ffi/issues/653\n[2]:https://talk.jekyllrb.com/t/load-error-cannot-load-such-file-webrick/5417","dir":"/docs/others/","name":"jekyll-install.md","path":"docs/others/jekyll-install.md","url":"/docs/others/jekyll-install.html"},{"last_modified_at":"2022-12-20 16:30:26 +0800","layout":"default","title":null,"content":"","dir":"/docs/tool/","name":"idea-jar-debug.md","path":"docs/tool/idea-jar-debug.md","url":"/docs/tool/idea-jar-debug.html"},{"last_modified_at":"2022-12-20 16:30:26 +0800","layout":"default","title":null,"content":"","dir":"/docs/tool/","name":"maven-dependency.md","path":"docs/tool/maven-dependency.md","url":"/docs/tool/maven-dependency.html"},{"title":"无法从Redis池中获取连接","last_modified_at":"2022-12-20 10:15:08 +0800","layout":"default","content":"# Timeout waiting for idle object\n\n> 以下内容为笔者实践而来，并结合自己的推测整理。若有不对或疏漏的欢迎交流。\n\n## 问题引出\n> 现象：某次高并发过后，应用系统部分接口仍旧出现系统异常。查看应用日志，初步推断为redis连接池问题，查看grafana中的redis监控，redis客户端连接数较少\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/c427ca0068cc4e62bd64276104e8b8a0.png#pic_left)\n\n临时快速解决方法：**<font color=\"red\">重启应用</font>**\n\nPs: 重启大法好 --，--！\n\n## 问题初探\n\n### 初步排查\n1. 拉取生产应用日志\n\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/4f1e5fe6f34944cb88e396bc5efb6c55.png#pic_left)\n\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/acba83df83ca433ba73b38be14a44add.png#pic_left)\n\n\n2. 根据日志，初步推测为redis连接池问题导致问题发生，查看生产Redis监控，发现Redis在高并发时间段，连接数较多，但对于redis服务端来说，仍在可控范围，并且在高峰过后，Redis连接已被释放。于是引出两个问题需要弄清\n \n > 1. 高峰时间段Redis服务端无问题，难道是Java应用的连接池满了？\n > 2. Redis连接释放后，为何还是无法从连接池中获取到对象？\n\n### 问题复现\n 使用ab作为模拟高并发工具。参考[ab简介与基本使用][ab]\n\n 使用redis-stat实时监控redis服务端信息。参考[redis-stat简介与基本使用][redis-stat]\n\n 应用debug，若应用部署在服务器，采用remote-debug形式。参考[Idea远程调试][idea-debug]\n\n 步骤\n 1. ab脚本50并发压测服务器，观察redis服务器情况(连接数)；服务器连接数达到应用Jedis-pool的配置的连接数；整体表现和生产相同；（由于仅限复现问题，适当调小Jedis配置）\n\n ```yaml\n spring\n redis:\n # 地址\n host: localhost\n # 端口，默认为6379\n port: 26379\n password: 3edcVFR$\n # 连接超时时间\n timeout: 10s\n jedis:\n pool:\n # 连接池中的最小空闲连接\n min-idle: 2\n # 连接池中的最大空闲连接\n max-idle: 6\n # 连接池的最大数据库连接数\n max-active: 6\n # 连接池最大阻塞等待时间（使用负值表示没有限制）300ms\n max-wait: 300\n ```\n\n 2. 观察Redis服务端情况，表现和生产相同 \n ![在这里插入图片描述](https://img-blog.csdnimg.cn/990602aca60d4e99ae3db6a1efb22f53.png#pic_left)\n 3. 请求相关接口，都已经表现为系统异常，并且redis服务端连接释放后，系统仍未恢复；和生产表现相同，至此，生产问题完全复现\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/92ec44926473496e86b299b524d2b2a0.png#pic_left)\n\n\n\n### 源码排查\n 高并发接口中的代码，引用了@Cacheable(该注解请参考[@Cache部分源码解读][Cache])\n\n_时序图参考_\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/f92527d669cc4b659566d5f736ff19e0.jpeg#pic_center)\n\n ```java\n @Cacheable(value = \"history\")\n public Integer canDutyPersonNum(String orgCode, Integer jgsx) {\n // 省略\n }\n ```\n @Cacheable主要是通过CacheAspectSupport实现，处理流程大致为excute()->excute()->findCachedItem()->findInCaches()->Cache.ValueWrapper.doGet()\n\n ```java\n CacheAspectSupport.java\t\n \n \t@Nullable\n \tprotected Object execute(CacheOperationInvoker invoker, Object target, Method method, Object[] args) {\n \t\t// Check whether aspect is enabled (to cope with cases where the AJ is pulled in automatically)\n \t\tif (this.initialized) {\n \t\t\tClass<?> targetClass = getTargetClass(target);\n \t\t\tCacheOperationSource cacheOperationSource = getCacheOperationSource();\n \t\t\tif (cacheOperationSource != null) {\n \t\t\t\tCollection<CacheOperation> operations = cacheOperationSource.getCacheOperations(method, targetClass);\n \t\t\t\tif (!CollectionUtils.isEmpty(operations)) {\n \t\t\t\t\treturn execute(invoker, method,\n \t\t\t\t\t\t\tnew CacheOperationContexts(operations, method, args, target, targetClass));\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \n \t\treturn invoker.invoke();\n \t}\n \n // ...\n \n @Nullable\n \tprivate Object execute(final CacheOperationInvoker invoker, Method method, CacheOperationContexts contexts) {\n \t\t// Special handling of synchronized invocation\n \t\tif (contexts.isSynchronized()) {\n \t\t\tCacheOperationContext context = contexts.get(CacheableOperation.class).iterator().next();\n \t\t\tif (isConditionPassing(context, CacheOperationExpressionEvaluator.NO_RESULT)) {\n \t\t\t\tObject key = generateKey(context, CacheOperationExpressionEvaluator.NO_RESULT);\n \t\t\t\tCache cache = context.getCaches().iterator().next();\n \t\t\t\ttry {\n \t\t\t\t\treturn wrapCacheValue(method, cache.get(key, () -> unwrapReturnValue(invokeOperation(invoker))));\n \t\t\t\t}\n \t\t\t\tcatch (Cache.ValueRetrievalException ex) {\n \t\t\t\t\t// The invoker wraps any Throwable in a ThrowableWrapper instance so we\n \t\t\t\t\t// can just make sure that one bubbles up the stack.\n \t\t\t\t\tthrow (CacheOperationInvoker.ThrowableWrapper) ex.getCause();\n \t\t\t\t}\n \t\t\t}\n \t\t\telse {\n \t\t\t\t// No caching required, only call the underlying method\n \t\t\t\treturn invokeOperation(invoker);\n \t\t\t}\n \t\t}\n \n \n \t\t// Process any early evictions\n \t\tprocessCacheEvicts(contexts.get(CacheEvictOperation.class), true,\n \t\t\t\tCacheOperationExpressionEvaluator.NO_RESULT);\n \n \t\t// Check if we have a cached item matching the conditions\n \t\tCache.ValueWrapper cacheHit = findCachedItem(contexts.get(CacheableOperation.class));\n }\n \n \t@Nullable\n \tprivate Cache.ValueWrapper findCachedItem(Collection<CacheOperationContext> contexts) {\n \t\tObject result = CacheOperationExpressionEvaluator.NO_RESULT;\n \t\tfor (CacheOperationContext context : contexts) {\n \t\t\tif (isConditionPassing(context, result)) {\n \t\t\t\tObject key = generateKey(context, result);\n \t\t\t\tCache.ValueWrapper cached = findInCaches(context, key);\n \t\t\t\tif (cached != null) {\n \t\t\t\t\treturn cached;\n \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\tif (logger.isTraceEnabled()) {\n \t\t\t\t\t\tlogger.trace(\"No cache entry for key '\" + key + \"' in cache(s) \" + context.getCacheNames());\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \t\treturn null;\n \t}\n \n \t@Nullable\n \tprivate Cache.ValueWrapper findInCaches(CacheOperationContext context, Object key) {\n \t\tfor (Cache cache : context.getCaches()) {\n \t\t\tCache.ValueWrapper wrapper = doGet(cache, key);\n \t\t\tif (wrapper != null) {\n \t\t\t\tif (logger.isTraceEnabled()) {\n \t\t\t\t\tlogger.trace(\"Cache entry for key '\" + key + \"' found in cache '\" + cache.getName() + \"'\");\n \t\t\t\t}\n \t\t\t\treturn wrapper;\n \t\t\t}\n \t\t}\n \t\treturn null;\n \t}\n \n ```\n\n ```java\n AbstractCacheInvoker.java\n \t@Nullable\n \tprotected Cache.ValueWrapper doGet(Cache cache, Object key) {\n \t\ttry {\n \t\t\treturn cache.get(key);\n \t\t}\n \t\tcatch (RuntimeException ex) {\n \t\t\tgetErrorHandler().handleCacheGetError(ex, cache, key);\n \t\t\treturn null; // If the exception is handled, return a cache miss\n \t\t}\n \t}\n ```\n\n Cache.ValueWrapper.doGet()->Cache.get() Cache为interface，查看Cache的实现图，判断为AbstractValueAdaptingCache的实现。若无法判断为哪一个类的执行，则可通过debug定位追踪\n\n<img src=\"https://img-blog.csdnimg.cn/bf9d79297801470b9dfc6bf683766b05.png#pic_left&width=100\" alt=\"在这里插入图片描述\" style=\"zoom:50%;\" />\n \n![在这里插入图片描述](https://img-blog.csdnimg.cn/0b1c72807c484fdb8432bb4355e6b716.png#pic_left)\n\n\n```java\nCache.java\n \nValueWrapper get(Object key);\n```\n\n```java\n RedisCache.java\n \n @Override\n @SuppressWarnings(\"unchecked\")\n @Nullable\n public <T> T get(Object key, @Nullable Class<T> type) {\n Object value = fromStoreValue(lookup(key));\n if (value != null && type != null && !type.isInstance(value)) {\n throw new IllegalStateException(\n \"Cached value is not of required type [\" + type.getName() + \"]: \" + value);\n }\n return (T) value;\n }\n```\n\n Cache.get()->AbstractValueAdaptingCache.get()->fromStoreValue(lookup(key))->lookup() lookup的实现如图，其采用的方法为RedisCache\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/2a22d44fb517423f8ea046f0c8ed0bb2.png#pic_left)\n\n\n ```java\n RedisCache.java\n \n @Override\n protected Object lookup(Object key) {\n \n byte[] value = cacheWriter.get(name, createAndConvertCacheKey(key));\n \n if (value == null) {\n return null;\n }\n \n return deserializeCacheValue(value);\n }\n ```\n\n RedisCache.lookup()->cacheWriter.get() cacheWriter(RedisCacheWriter)的实现默认只有一个DefaultRedisCacheWriter，IRedisCacheWriter为笔者添加的\n\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/a534282e95fb4ba5b5d9d2a0ca24aa91.png#pic_left)\n\n ```java\n DefaultRedisCacheWriter.java\n @Override\n public byte[] get(String name, byte[] key) {\n \n Assert.notNull(name, \"Name must not be null!\");\n Assert.notNull(key, \"Key must not be null!\");\n \n return execute(name, connection -> connection.get(key));\n }\n \n \n private <T> T execute(String name, Function<RedisConnection, T> callback) {\n \n RedisConnection connection = connectionFactory.getConnection();\n try {\n \n checkAndPotentiallyWaitUntilUnlocked(name, connection);\n return callback.apply(connection);\n } finally {\n connection.close();\n }\n }\n ```\nDefaultRedisCacheWriter.get()->execute()->connectionFactory.getConnection() connectionFactory默认实现有两个，JedisSelfConnectionFactory为笔者实现的，该处为JedisConnectionFactory\n\n_JedisConnectionFactory时序图参考_\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/f2845e727cb94bb08de954fd2ba01b3d.jpeg#pic_center)\n\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/4ff20337c2bf4c8097dac530226c797e.png#pic_left)\n\n\n JedisConnectionFactory.getConnection()->fetchJedisConnector()->pool.getResource()\n ```java\n \tJedisConnectionFactory.java\n public RedisConnection getConnection() {\n \n \tif (isRedisClusterAware()) {\n \t\treturn getClusterConnection();\n \t}\n \t\n \tJedis jedis = fetchJedisConnector();\n \tString clientName = clientConfiguration.getClientName().orElse(null);\n JedisConnection connection = (getUsePool() ? new JedisConnection(jedis, pool, getDatabase(), clientName)\n \t\t\t: new JedisConnection(jedis, null, getDatabase(), clientName));\n \tconnection.setConvertPipelineAndTxResults(convertPipelineAndTxResults);\n return postProcessConnection(connection);\n }\n \n protected Jedis fetchJedisConnector() {\n try {\n \n \t\tif (getUsePool() && pool != null) {\n \t\t\treturn pool.getResource();\n \t}\n \t\n \t\tJedis jedis = createJedis();\n \t\t// force initialization (see Jedis issue #82)\n \t\tjedis.connect();\n \t\n \t\tpotentiallySetClientName(jedis);\n \t\treturn jedis;\n } catch (Exception ex) {\n \tthrow new RedisConnectionFailureException(\"Cannot get Jedis connection\", ex);\n }\n }\n ```\n\n pool.getResource() pool有三个子类实现，该处为JedisPool，pool.getResource()->GenericObjectPool.borrowObject() 在该方法中，我们看到了底层堆栈抛出的异常“Timeout waiting for idle object” 至此，整个源码过程追踪完毕，这也符合我们从日志中查看到的堆栈信息。那么现在的问题核心就是分析GenericObjectPool.borrowObject()中异常为何抛出了。\n\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/6dec3f8404bd40658b3bb565ed4c4219.png#pic_left)\n\n ```java\n Pool.java\n public T getResource() {\n try {\n return internalPool.borrowObject();\n } catch (NoSuchElementException nse) {\n throw new JedisException(\"Could not get a resource from the pool\", nse);\n } catch (Exception e) {\n throw new JedisConnectionException(\"Could not get a resource from the pool\", e);\n }\n }\n ```\n\n ```java\nGenericObjectPool.java\n @Override\n public T borrowObject() throws Exception {\n return borrowObject(getMaxWaitMillis());\n }\n \n public T borrowObject(final long borrowMaxWaitMillis) throws Exception {\n assertOpen();\n \n final AbandonedConfig ac = this.abandonedConfig;\n if (ac != null && ac.getRemoveAbandonedOnBorrow() &&\n (getNumIdle() < 2) &&\n (getNumActive() > getMaxTotal() - 3) ) {\n removeAbandoned(ac);\n }\n \n PooledObject<T> p = null;\n \n // Get local copy of current config so it is consistent for entire\n // method execution\n final boolean blockWhenExhausted = getBlockWhenExhausted();\n \n boolean create;\n final long waitTime = System.currentTimeMillis();\n \n while (p == null) {\n create = false;\n p = idleObjects.pollFirst();\n if (p == null) {\n p = create();\n if (p != null) {\n create = true;\n }\n }\n if (blockWhenExhausted) {\n if (p == null) {\n if (borrowMaxWaitMillis < 0) {\n p = idleObjects.takeFirst();\n } else {\n p = idleObjects.pollFirst(borrowMaxWaitMillis,\n TimeUnit.MILLISECONDS);\n }\n }\n if (p == null) {\n throw new NoSuchElementException(\n \"Timeout waiting for idle object\");\n }\n } else {\n if (p == null) {\n throw new NoSuchElementException(\"Pool exhausted\");\n }\n }\n if (!p.allocate()) {\n p = null;\n }\n \n if (p != null) {\n try {\n factory.activateObject(p);\n } catch (final Exception e) {\n try {\n destroy(p);\n } catch (final Exception e1) {\n // Ignore - activation failure is more important\n }\n p = null;\n if (create) {\n final NoSuchElementException nsee = new NoSuchElementException(\n \"Unable to activate object\");\n nsee.initCause(e);\n throw nsee;\n }\n }\n if (p != null && (getTestOnBorrow() || create && getTestOnCreate())) {\n boolean validate = false;\n Throwable validationThrowable = null;\n try {\n validate = factory.validateObject(p);\n } catch (final Throwable t) {\n PoolUtils.checkRethrow(t);\n validationThrowable = t;\n }\n if (!validate) {\n try {\n destroy(p);\n destroyedByBorrowValidationCount.incrementAndGet();\n } catch (final Exception e) {\n // Ignore - validation failure is more important\n }\n p = null;\n if (create) {\n final NoSuchElementException nsee = new NoSuchElementException(\n \"Unable to validate object\");\n nsee.initCause(validationThrowable);\n throw nsee;\n }\n }\n }\n }\n }\n \n updateStatsBorrow(p, System.currentTimeMillis() - waitTime);\n \n return p.getObject();\n }\n ```\n\n 分析抛出异常的代码块，Debug到该段代码块\n\n```java\nGenericObjectPool.borrowObject() \nif (blockWhenExhausted) {\n if (p == null) {\n if (borrowMaxWaitMillis < 0) {\n // 空闲队列中获取空闲对象 一直等待 \n p = idleObjects.takeFirst();\n } else {\n // 等待borrowMaxWaitMillis ms后,放弃 该参数即对应redis中的配置 max-wait\n p = idleObjects.pollFirst(borrowMaxWaitMillis,\n TimeUnit.MILLISECONDS);\n }\n }\n if (p == null) {\n throw new NoSuchElementException(\n \"Timeout waiting for idle object\");\n }\n }\n```\n\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/5012d288b2a74bc4a86cdec8890e15f4.png#pic_left)\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/4e9b0dff532e4360b597f51a8d420325.png#pic_left)\n\n\n> 观察发现，该对象中的allObject已经都是被分配(ALLOCATED)状态，因此当程序继续请求，都将报错。\n\n> 也许你有这样的疑问，程序已经不在使用redis连接池中的连接，而且Redis服务端也显示客户端未占用连接来，为何应用中对象未被释放，reidis中不是默认会有闲时检测么（关于redis的配置参考[Redis配置解读][Redis-config]），我们进一步探究\n\n reidis中的闲时检测，是基于BaseGenericObjectPool.java中的定时线程实现，主要关注evict()方法\n\n ```java\n BaseGenericObjectPool.java\n /**\n * The idle object evictor {@link TimerTask}.\n *\n * @see GenericKeyedObjectPool#setTimeBetweenEvictionRunsMillis\n */\n class Evictor implements Runnable {\n \n private ScheduledFuture<?> scheduledFuture;\n \n /**\n * Run pool maintenance. Evict objects qualifying for eviction and then\n * ensure that the minimum number of idle instances are available.\n * Since the Timer that invokes Evictors is shared for all Pools but\n * pools may exist in different class loaders, the Evictor ensures that\n * any actions taken are under the class loader of the factory\n * associated with the pool.\n */\n @Override\n public void run() {\n final ClassLoader savedClassLoader =\n Thread.currentThread().getContextClassLoader();\n try {\n if (factoryClassLoader != null) {\n // Set the class loader for the factory\n final ClassLoader cl = factoryClassLoader.get();\n if (cl == null) {\n // The pool has been dereferenced and the class loader\n // GC'd. Cancel this timer so the pool can be GC'd as\n // well.\n cancel();\n return;\n }\n Thread.currentThread().setContextClassLoader(cl);\n }\n \n // Evict from the pool\n try {\n evict();\n } catch(final Exception e) {\n swallowException(e);\n } catch(final OutOfMemoryError oome) {\n // Log problem but give evictor thread a chance to continue\n // in case error is recoverable\n oome.printStackTrace(System.err);\n }\n // Re-create idle instances.\n try {\n ensureMinIdle();\n } catch (final Exception e) {\n swallowException(e);\n }\n } finally {\n // Restore the previous CCL\n Thread.currentThread().setContextClassLoader(savedClassLoader);\n }\n }\n \n \n void setScheduledFuture(final ScheduledFuture<?> scheduledFuture) {\n this.scheduledFuture = scheduledFuture;\n }\n \n \n void cancel() {\n scheduledFuture.cancel(false);\n }\n }\n ```\n\nevict()方法中，我们发现第一步的清理基于有空闲对象的基础上执行，而在上述Debug过程中，我们发现borrowObject已经无空闲资源了，因此对象无法被触发回收。\n还有一个清理对象是基于AbandonConfig进行的。针对此配置下面叙述。\n\n```java\nGenericObjectPool.java\npublic void evict() throws Exception {\n assertOpen();\n\n if (idleObjects.size() > 0) {\n \n PooledObject<T> underTest = null;\n final EvictionPolicy<T> evictionPolicy = getEvictionPolicy();\n \n synchronized (evictionLock) {\n final EvictionConfig evictionConfig = new EvictionConfig(\n getMinEvictableIdleTimeMillis(),\n getSoftMinEvictableIdleTimeMillis(),\n getMinIdle());\n \n final boolean testWhileIdle = getTestWhileIdle();\n \n for (int i = 0, m = getNumTests(); i < m; i++) {\n if (evictionIterator == null || !evictionIterator.hasNext()) {\n evictionIterator = new EvictionIterator(idleObjects);\n }\n if (!evictionIterator.hasNext()) {\n // Pool exhausted, nothing to do here\n return;\n }\n \n try {\n underTest = evictionIterator.next();\n } catch (final NoSuchElementException nsee) {\n // Object was borrowed in another thread\n // Don't count this as an eviction test so reduce i;\n i--;\n evictionIterator = null;\n continue;\n }\n \n if (!underTest.startEvictionTest()) {\n // Object was borrowed in another thread\n // Don't count this as an eviction test so reduce i;\n i--;\n continue;\n }\n \n // User provided eviction policy could throw all sorts of\n // crazy exceptions. Protect against such an exception\n // killing the eviction thread.\n boolean evict;\n try {\n evict = evictionPolicy.evict(evictionConfig, underTest,\n idleObjects.size());\n } catch (final Throwable t) {\n // Slightly convoluted as SwallowedExceptionListener\n // uses Exception rather than Throwable\n PoolUtils.checkRethrow(t);\n swallowException(new Exception(t));\n // Don't evict on error conditions\n evict = false;\n }\n \n if (evict) {\n destroy(underTest);\n destroyedByEvictorCount.incrementAndGet();\n } else {\n if (testWhileIdle) {\n boolean active = false;\n try {\n factory.activateObject(underTest);\n active = true;\n } catch (final Exception e) {\n destroy(underTest);\n destroyedByEvictorCount.incrementAndGet();\n }\n if (active) {\n if (!factory.validateObject(underTest)) {\n destroy(underTest);\n destroyedByEvictorCount.incrementAndGet();\n } else {\n try {\n factory.passivateObject(underTest);\n } catch (final Exception e) {\n destroy(underTest);\n destroyedByEvictorCount.incrementAndGet();\n }\n }\n }\n }\n if (!underTest.endEvictionTest(idleObjects)) {\n // TODO - May need to add code here once additional\n // states are used\n }\n }\n }\n }\n }\n final AbandonedConfig ac = this.abandonedConfig;\n if (ac != null && ac.getRemoveAbandonedOnMaintenance()) {\n removeAbandoned(ac);\n }\n}\n```\n <img src=\"https://img-blog.csdnimg.cn/6696d8523c7a4c6ebceb08e7f60d4727.png#pic_center\" alt=\"在这里插入图片描述\" style=\"zoom: 33%;\" />\n\n\n### 初步总结\n\n> 通过Debug，我们推断问题的发生是GenericObjectPool的allObject都已经处于Allocated状态，导致异常抛出。那么要解决该问题，可以通过触发释放对象。当然这仅仅是针对问题，解决表象的思路。\n>\n> **<font color=red>2022-12-16补充：</font>**也许你还有这样的疑问：既然连接未创建成功，这些被分配的对象又是如何来的？这些对象创建后，又是哪里被回收或者丢弃的？\n>\n> 答：我们分析源码得知在connectionFactory获取connection过程中，若使用连接池，会使用GenericObjectPool.borrowObject()，只有成功获取对象，才认为连接创建成功，从而执行命令，关闭连接，并返还或销毁对象，执行JedisConnection.close()->jedis.close()方法；而在2.9.1版本中jedis.close()方法是存在jedis对象泄漏的，关于泄漏问题，请参考[低版本中Jedis对象泄漏证明及探究][jedis-pool]。\n>\n> Ps: 在之前的分析中，未深入分析Jedis对象泄漏问题，因此临时通过AbandonConfig配置，主动释放对象。\n\n那么我们有没有其他方法进行设置，触发释放呢？ \n\n关注两块代码 borrowObject()和evict()方法中都有 AbandonedConfig这个配置；关于这个配置可以阅读源码注释；这是个能在获取连接的时候就进行分配对象舍弃的设置。\n\n ```java\n GenericObjectPool.java \n public T borrowObject(final long borrowMaxWaitMillis) throws Exception {\n assertOpen();\n \n final AbandonedConfig ac = this.abandonedConfig;\n if (ac != null && ac.getRemoveAbandonedOnBorrow() &&\n (getNumIdle() < 2) &&\n (getNumActive() > getMaxTotal() - 3) ) {\n removeAbandoned(ac);\n }\n // ...\n }\n @Override\n public void evict() throws Exception {\n // ...\n final AbandonedConfig ac = this.abandonedConfig;\n if (ac != null && ac.getRemoveAbandonedOnMaintenance()) {\n removeAbandoned(ac);\n }\n }\n ```\n\n直接修改此段代码，给AbandonConfig赋值。关于如何修改依赖jar的源码请参考[IDEA引入源码包修改调试][idea-jar-debug]\n\n按相同的并发操作步骤，仅给AbandonConfig赋值，测试问题是否可以得到解决；测试结果如下图，可以发现，程序进入后释放了占用对象，并在并发结束后，仍能正常提供服务。\n ```java\n AbandonedConfig abandonedConfig = new AbandonedConfig();\n abandonedConfig.setLogAbandoned(true);\n abandonedConfig.setRemoveAbandonedOnBorrow(true);\n ```\n\n<img src=\"https://img-blog.csdnimg.cn/b55eec738ab144e48ce3ef3c8b803959.png#pic_left\" alt=\"在这里插入图片描述\" style=\"zoom:50%;margin:0px\" />\n\n\n> redis为何未暴露AandonConfig配置，请参考[Redis配置解读][Redis-config]； \n\n> 简单说明，3版本Jedis未提供设置方法，4版本提供，但需要SpringBoot同步升级到3版本以上，且该配置通过pool对象设置\n\n引申的问题：若我们强制给AbandonConfig赋值，是否合理，会有什么弊端？\n\n## 解决方案\n1. 升级Jedis版本 **<font color=red>推荐</font>** jedis版本要3.6.0以上，主要关注源码包中下面代码\n\n ```java\n @Override\n public void close() {\n if (dataSource != null) {\n JedisPoolAbstract pool = this.dataSource;\n this.dataSource = null;\n if (isBroken()) {\n pool.returnBrokenResource(this);\n } else {\n pool.returnResource(this);\n }\n } else {\n super.close();\n }\n }\n ```\n\n 官方网址：[jedis-3.6.0][jedis-3.6]\n\n **注：**若你使用springboot配套的spring-data-redis，需要注意依赖的版本问题。关于如何查看项目依赖，请参考[spring-boot低版本升级jedis至3.6.0版本][maven-dep]\n\n2. 源码修改编译\n 拉取Jedis源码包，修改Pool的构造方法，使其支持Abandon Config设置，重新编译，生成定制版的jar。\n\n > 优点：可自定义程度高，甚至可以将原先仅支持几个配置的pool，完全置于配置文件中；同时其他的操作都可以共享该配置。\n >\n > 缺点：每次redis升级都得适配\n\n 参考[redis-abandon-config](https://github.com/redis/jedis/compare/master...venukbh:jedis:jedis-pool-with-abandon-config)\n\n3. 重写connection方法\n 仅修改CachaAspectSupport相关，通过自定义实现RedisCacheWriter，重写其connection()方法\n\n > 优点：不影响源码包，后续升级不受影响\n >\n > 缺点：代码显得冗余，容易造成使用误解或干扰，重新执行了一次创建pool的流程，且redis其他使用pool的地方仍旧使用原先的pool，可以理解为维护了两套pool\n\n ```java\n package com.kaizhi.cache;\n \n import com.kaizhi.scheduling.config.JedisSelfFactory;\n import lombok.extern.slf4j.Slf4j;\n \n import org.apache.commons.pool2.impl.AbandonedConfig;\n import org.apache.commons.pool2.impl.GenericObjectPool;\n import org.apache.commons.pool2.impl.GenericObjectPoolConfig;\n import org.springframework.dao.PessimisticLockingFailureException;\n import org.springframework.data.redis.cache.RedisCacheWriter;\n import org.springframework.data.redis.connection.RedisConnection;\n import org.springframework.data.redis.connection.RedisConnectionFactory;\n import org.springframework.data.redis.connection.RedisStringCommands;\n import org.springframework.data.redis.connection.jedis.JedisClientConfiguration;\n import org.springframework.data.redis.connection.jedis.JedisConnection;\n import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;\n import org.springframework.data.redis.core.types.Expiration;\n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n import redis.clients.jedis.Jedis;\n import redis.clients.jedis.JedisPool;\n import redis.clients.jedis.Protocol;\n import redis.clients.jedis.exceptions.JedisConnectionException;\n import redis.clients.jedis.exceptions.JedisException;\n import redis.clients.util.Pool;\n \n import java.nio.charset.StandardCharsets;\n import java.time.Duration;\n import java.util.Collections;\n import java.util.NoSuchElementException;\n import java.util.Optional;\n import java.util.concurrent.TimeUnit;\n import java.util.function.Consumer;\n import java.util.function.Function;\n \n /**\n * @Author: youzhanghao\n * @ClassName: IRedisCacheWriter\n * @Date: 2022-11-29 10:01:14\n * @email: m13732916591_1@163.com\n * @Description: \n * @Version: 1.0\n */\n @Slf4j\n public class IRedisCacheWriter implements RedisCacheWriter {\n \n private final RedisConnectionFactory connectionFactory;\n private final Duration sleepTime;\n \n \n /**\n * @param connectionFactory must not be {@literal null}.\n */\n public IRedisCacheWriter (RedisConnectionFactory connectionFactory) {\n this(connectionFactory, Duration.ZERO);\n }\n \n public IRedisCacheWriter (JedisConnectionFactory connectionFactory) {\n this(connectionFactory, Duration.ZERO);\n }\n \n /**\n * @param connectionFactory must not be {@literal null}.\n * @param sleepTime sleep time between lock request attempts. Must not be {@literal null}. Use {@link Duration#ZERO}\n * to disable locking.\n */\n public IRedisCacheWriter (RedisConnectionFactory connectionFactory, Duration sleepTime) {\n \n Assert.notNull(connectionFactory, \"ConnectionFactory must not be null!\");\n Assert.notNull(sleepTime, \"SleepTime must not be null!\");\n \n this.connectionFactory = connectionFactory;\n this.sleepTime = sleepTime;\n }\n \n /*\n * (non-Javadoc)\n * @see org.springframework.data.redis.cache.RedisCacheWriter#put(java.lang.String, byte[], byte[], java.time.Duration)\n */\n @Override\n public void put(String name, byte[] key, byte[] value, @Nullable Duration ttl) {\n \n Assert.notNull(name, \"Name must not be null!\");\n Assert.notNull(key, \"Key must not be null!\");\n Assert.notNull(value, \"Value must not be null!\");\n \n execute(name, connection -> {\n \n if (shouldExpireWithin(ttl)) {\n connection.set(key, value, Expiration.from(ttl.toMillis(), TimeUnit.MILLISECONDS), RedisStringCommands.SetOption.upsert());\n } else {\n connection.set(key, value);\n }\n \n return \"OK\";\n });\n }\n \n /*\n * (non-Javadoc)\n * @see org.springframework.data.redis.cache.RedisCacheWriter#get(java.lang.String, byte[])\n */\n @Override\n public byte[] get(String name, byte[] key) {\n \n Assert.notNull(name, \"Name must not be null!\");\n Assert.notNull(key, \"Key must not be null!\");\n \n return execute(name, connection -> connection.get(key));\n }\n \n /*\n * (non-Javadoc)\n * @see org.springframework.data.redis.cache.RedisCacheWriter#putIfAbsent(java.lang.String, byte[], byte[], java.time.Duration)\n */\n @Override\n public byte[] putIfAbsent(String name, byte[] key, byte[] value, @Nullable Duration ttl) {\n \n Assert.notNull(name, \"Name must not be null!\");\n Assert.notNull(key, \"Key must not be null!\");\n Assert.notNull(value, \"Value must not be null!\");\n \n return execute(name, connection -> {\n \n if (isLockingCacheWriter()) {\n doLock(name, connection);\n }\n \n try {\n if (connection.setNX(key, value)) {\n \n if (shouldExpireWithin(ttl)) {\n connection.pExpire(key, ttl.toMillis());\n }\n return null;\n }\n \n return connection.get(key);\n } finally {\n \n if (isLockingCacheWriter()) {\n doUnlock(name, connection);\n }\n }\n });\n }\n \n /*\n * (non-Javadoc)\n * @see org.springframework.data.redis.cache.RedisCacheWriter#remove(java.lang.String, byte[])\n */\n @Override\n public void remove(String name, byte[] key) {\n \n Assert.notNull(name, \"Name must not be null!\");\n Assert.notNull(key, \"Key must not be null!\");\n \n execute(name, connection -> connection.del(key));\n }\n \n /*\n * (non-Javadoc)\n * @see org.springframework.data.redis.cache.RedisCacheWriter#clean(java.lang.String, byte[])\n */\n @Override\n public void clean(String name, byte[] pattern) {\n \n Assert.notNull(name, \"Name must not be null!\");\n Assert.notNull(pattern, \"Pattern must not be null!\");\n \n execute(name, connection -> {\n \n boolean wasLocked = false;\n \n try {\n \n if (isLockingCacheWriter()) {\n doLock(name, connection);\n wasLocked = true;\n }\n \n //使用scan命令代替keys命令\n Cursor<byte[]> cursor = connection.scan(new ScanOptions.ScanOptionsBuilder().match(new String(pattern)).count(1000).build());\n Set<byte[]> byteSet = new HashSet<>();\n while (cursor.hasNext()) {\n byteSet.add(cursor.next());\n }\n \n byte[][] keys = byteSet.toArray(new byte[0][]);\n \n if (keys.length > 0) {\n connection.del(keys);\n }\n } finally {\n \n if (wasLocked && isLockingCacheWriter()) {\n doUnlock(name, connection);\n }\n }\n \n return \"OK\";\n });\n }\n \n \n \n /**\n * Explicitly set a write lock on a cache.\n *\n * @param name the name of the cache to lock.\n */\n void lock(String name) {\n execute(name, connection -> doLock(name, connection));\n }\n \n /**\n * Explicitly remove a write lock from a cache.\n *\n * @param name the name of the cache to unlock.\n */\n void unlock(String name) {\n executeLockFree(connection -> doUnlock(name, connection));\n }\n \n private Boolean doLock(String name, RedisConnection connection) {\n return connection.setNX(createCacheLockKey(name), new byte[0]);\n }\n \n private Long doUnlock(String name, RedisConnection connection) {\n return connection.del(createCacheLockKey(name));\n }\n \n boolean doCheckLock(String name, RedisConnection connection) {\n return connection.exists(createCacheLockKey(name));\n }\n \n /**\n * @return {@literal true} if {@link RedisCacheWriter} uses locks.\n */\n private boolean isLockingCacheWriter() {\n return !sleepTime.isZero() && !sleepTime.isNegative();\n }\n \n private <T> T execute(String name, Function<RedisConnection, T> callback) {\n RedisConnection connection = null;\n try {\n JedisConnectionFactory jedisConnectionFactory = (JedisConnectionFactory) connectionFactory;\n connection = getConnection(jedisConnectionFactory);\n // connection = connectionFactory.getConnection();\n checkAndPotentiallyWaitUntilUnlocked(name, connection);\n return callback.apply(connection);\n } finally {\n if(connection !=null){\n connection.close();\n }\n }\n }\n \n public RedisConnection getConnection(JedisConnectionFactory connectionFactory) {\n \n if (connectionFactory.isRedisClusterAware()) {\n return connectionFactory.getClusterConnection();\n }\n \n GenericObjectPoolConfig poolConfig = connectionFactory.getPoolConfig() ;\n AbandonedConfig abandonedConfig = new AbandonedConfig();\n abandonedConfig.setLogAbandoned(true);\n abandonedConfig.setRemoveAbandonedOnBorrow(true);\n GenericObjectPool<Jedis> pool = new GenericObjectPool<Jedis>(new JedisSelfFactory(connectionFactory.getHostName(), connectionFactory.getPort(), Protocol.DEFAULT_TIMEOUT, Protocol.DEFAULT_TIMEOUT ,\n connectionFactory.getPassword(), connectionFactory.getDatabase(), \"test\", connectionFactory.isUseSsl(), null, null, null), poolConfig,abandonedConfig);\n Pool<Jedis> jedisPool = createRedisPool(connectionFactory);\n Jedis jedis;\n try {\n jedis = pool.borrowObject();\n } catch (NoSuchElementException nse) {\n throw new JedisException(\"Could not get a resource from the pool\", nse);\n } catch (Exception e) {\n throw new JedisConnectionException(\"Could not get a resource from the pool\", e);\n }\n JedisConnection connection = (connectionFactory.getUsePool() ? new JedisConnection(jedis, jedisPool, connectionFactory.getDatabase())\n : new JedisConnection(jedis, null, connectionFactory.getDatabase()));\n return connection;\n }\n \n protected Pool<Jedis> createRedisPool(JedisConnectionFactory jedisConnectionFactory) {\n JedisClientConfiguration clientConfiguration = jedisConnectionFactory.getClientConfiguration();\n return new JedisPool(jedisConnectionFactory.getPoolConfig(), jedisConnectionFactory.getHostName(), jedisConnectionFactory.getPort(),getConnectTimeout(clientConfiguration), getReadTimeout(clientConfiguration),\n jedisConnectionFactory.getPassword(),jedisConnectionFactory.getDatabase(), jedisConnectionFactory.getClientName(), jedisConnectionFactory.isUseSsl(),\n clientConfiguration.getSslSocketFactory().orElse(null), //\n clientConfiguration.getSslParameters().orElse(null), //\n clientConfiguration.getHostnameVerifier().orElse(null));\n }\n \n private int getConnectTimeout(JedisClientConfiguration clientConfiguration) {\n return Math.toIntExact(clientConfiguration.getConnectTimeout().toMillis());\n }\n \n private int getReadTimeout(JedisClientConfiguration clientConfiguration) {\n return Math.toIntExact(clientConfiguration.getReadTimeout().toMillis());\n }\n \n \n \n private void executeLockFree(Consumer<RedisConnection> callback) {\n \n RedisConnection connection = connectionFactory.getConnection();\n \n try {\n callback.accept(connection);\n } finally {\n connection.close();\n }\n }\n \n private void checkAndPotentiallyWaitUntilUnlocked(String name, RedisConnection connection) {\n \n if (!isLockingCacheWriter()) {\n return;\n }\n \n try {\n \n while (doCheckLock(name, connection)) {\n Thread.sleep(sleepTime.toMillis());\n }\n } catch (InterruptedException ex) {\n \n // Re-interrupt current thread, to allow other participants to react.\n Thread.currentThread().interrupt();\n \n throw new PessimisticLockingFailureException(String.format(\"Interrupted while waiting to unlock cache %s\", name),\n ex);\n }\n }\n \n private static boolean shouldExpireWithin(@Nullable Duration ttl) {\n return ttl != null && !ttl.isZero() && !ttl.isNegative();\n }\n \n private static byte[] createCacheLockKey(String name) {\n return (name + \"~lock\").getBytes(StandardCharsets.UTF_8);\n }\n \n \n }\n \n ```\n\n ```java\n public class JedisSelfFactory implements PooledObjectFactory<Jedis> {\n private final AtomicReference<HostAndPort> hostAndPort = new AtomicReference<HostAndPort>();\n private final int connectionTimeout;\n private final int soTimeout;\n private final String password;\n private final int database;\n private final String clientName;\n private final boolean ssl;\n private final SSLSocketFactory sslSocketFactory;\n private SSLParameters sslParameters;\n private HostnameVerifier hostnameVerifier;\n \n public JedisSelfFactory(final String host, final int port, final int connectionTimeout,\n final int soTimeout, final String password, final int database, final String clientName,\n final boolean ssl, final SSLSocketFactory sslSocketFactory, final SSLParameters sslParameters,\n final HostnameVerifier hostnameVerifier) {\n this.hostAndPort.set(new HostAndPort(host, port));\n this.connectionTimeout = connectionTimeout;\n this.soTimeout = soTimeout;\n this.password = password;\n this.database = database;\n this.clientName = clientName;\n this.ssl = ssl;\n this.sslSocketFactory = sslSocketFactory;\n this.sslParameters = sslParameters;\n this.hostnameVerifier = hostnameVerifier;\n }\n \n public JedisSelfFactory(final URI uri, final int connectionTimeout, final int soTimeout,\n final String clientName, final boolean ssl, final SSLSocketFactory sslSocketFactory,\n final SSLParameters sslParameters, final HostnameVerifier hostnameVerifier) {\n if (!JedisURIHelper.isValid(uri)) {\n throw new InvalidURIException(String.format(\n \"Cannot open Redis connection due invalid URI. %s\", uri.toString()));\n }\n \n this.hostAndPort.set(new HostAndPort(uri.getHost(), uri.getPort()));\n this.connectionTimeout = connectionTimeout;\n this.soTimeout = soTimeout;\n this.password = JedisURIHelper.getPassword(uri);\n this.database = JedisURIHelper.getDBIndex(uri);\n this.clientName = clientName;\n this.ssl = ssl;\n this.sslSocketFactory = sslSocketFactory;\n this.sslParameters = sslParameters;\n this.hostnameVerifier = hostnameVerifier;\n }\n \n public void setHostAndPort(final HostAndPort hostAndPort) {\n this.hostAndPort.set(hostAndPort);\n }\n \n @Override\n public void activateObject(PooledObject<Jedis> pooledJedis) throws Exception {\n final BinaryJedis jedis = pooledJedis.getObject();\n if (jedis.getDB() != database) {\n jedis.select(database);\n }\n \n }\n \n @Override\n public void destroyObject(PooledObject<Jedis> pooledJedis) throws Exception {\n final BinaryJedis jedis = pooledJedis.getObject();\n if (jedis.isConnected()) {\n try {\n try {\n jedis.quit();\n } catch (Exception e) {\n }\n jedis.disconnect();\n } catch (Exception e) {\n \n }\n }\n \n }\n \n @Override\n public PooledObject<Jedis> makeObject() throws Exception {\n final HostAndPort hostAndPort = this.hostAndPort.get();\n final Jedis jedis = new Jedis(hostAndPort.getHost(), hostAndPort.getPort(), connectionTimeout,\n soTimeout, ssl, sslSocketFactory, sslParameters, hostnameVerifier);\n \n try {\n jedis.connect();\n if (password != null) {\n jedis.auth(password);\n }\n if (database != 0) {\n jedis.select(database);\n }\n if (clientName != null) {\n jedis.clientSetname(clientName);\n }\n } catch (JedisException je) {\n jedis.close();\n throw je;\n }\n \n return new DefaultPooledObject<Jedis>(jedis);\n \n }\n \n @Override\n public void passivateObject(PooledObject<Jedis> pooledJedis) throws Exception {\n // TODO maybe should select db 0? Not sure right now.\n }\n \n @Override\n public boolean validateObject(PooledObject<Jedis> pooledJedis) {\n final BinaryJedis jedis = pooledJedis.getObject();\n try {\n HostAndPort hostAndPort = this.hostAndPort.get();\n \n String connectionHost = jedis.getClient().getHost();\n int connectionPort = jedis.getClient().getPort();\n \n return hostAndPort.getHost().equals(connectionHost)\n && hostAndPort.getPort() == connectionPort && jedis.isConnected()\n && jedis.ping().equals(\"PONG\");\n } catch (final Exception e) {\n return false;\n }\n }\n }\n ```\n\n ```java\n \n @Configuration\n @EnableCaching\n public class RedisConfig implements Serializable {\n \n \n \n @Bean\n public RedisCacheManager cacheManager(RedisConnectionFactory redisConnectionFactory) {\n return new RedisCacheManager(\n new IRedisCacheWriter(redisConnectionFactory),\n //实时数据 就是默认数据 缓存时间设置\n this.getRedisCacheConfigurationWithTtl(60), // 默认策略，未配置的 key 会使用这个\n this.getRedisCacheConfigurationMap() // 指定 key 策略\n );\n }\n \n private Map<String, RedisCacheConfiguration> getRedisCacheConfigurationMap() {\n Map<String, RedisCacheConfiguration> redisCacheConfigurationMap = new HashMap<>();\n //历史数据缓存24小时\n redisCacheConfigurationMap.put(\"history\", this.getRedisCacheConfigurationWithTtl(60 * 60*23));\n \n return redisCacheConfigurationMap;\n }\n \n private RedisCacheConfiguration getRedisCacheConfigurationWithTtl(Integer seconds) {\n Jackson2JsonRedisSerializer<Object> jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<>(Object.class);\n ObjectMapper om = new ObjectMapper();\n om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n jackson2JsonRedisSerializer.setObjectMapper(om);\n RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration.defaultCacheConfig();\n redisCacheConfiguration = redisCacheConfiguration.serializeValuesWith(\n RedisSerializationContext\n .SerializationPair\n .fromSerializer(jackson2JsonRedisSerializer)\n ).entryTtl(Duration.ofSeconds(seconds));\n \n return redisCacheConfiguration;\n }\n }\n ```\n\n4. 调整参数；通过源码分析，其是由于在规定时间内未借用到空闲对象，导致异常抛出。\n 若业务本身不复杂，直接调整max-wait参数 \n ```yaml\n spring:\n redis:\n jedis:\n pool:\n # 连接池最大阻塞等待时间（使用负值表示没有限制）默认是300ms\n max-wait: 300\n ```\n\n## 复盘总结\n\n> 上述的解决方法，后两种核心思想都是设置AbandonConfig，主动释放对象，可能会造成其他正在使用的连接被强制释放，设置需根据具体业务来综合判断。推荐通过升级版本来解决，若实在不能升级版本，可以通过修改jedis.close()方法，参考 [Move dataSource reset before connection returned][jedis-pool-bug]\n>\n\n[ab]: /tool/ab.html\n[redis-stat]: ../tool/redis-stat\n[idea-debug]: ../tool/idea-remote-debug\n[Cache]: ../java/cacheAsspectSupport-read\n[Redis-config]: ../java/redis-config\n[idea-jar-debug]: ../tool/idea-jar-debug\n[jedis-pool]: ../java/jedis-pool\n[jedis-pool-bug]: https://hub.nuaa.cf/redis/jedis/pull/1918/commits/df1bffa3c77f4ede4c912f2c3e78b5c8857725e7\n[jedis-3.6]:https://hub.nuaa.cf/redis/jedis/blob/jedis-3.6.0/src/main/java/redis/clients/jedis/Jedis.java\n[maven-dep]: ../tool/maven-dependency#spring-boot低版本升级jedis至360版本\n\n","dir":"/questions/","name":"jedis-pool-qa.md","path":"questions/jedis-pool-qa.md","url":"/questions/jedis-pool-qa.html"},{"last_modified_at":"2022-12-20 10:15:08 +0800","layout":"default","title":"ab","content":"<h1 id=\"ab\">ab</h1>\n\n<h2 id=\"安装\">安装</h2>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>brew <span class=\"nb\">install </span>ab   \n</code></pre>  </div></div>\n\n<h2 id=\"原理\">原理</h2>\n\n<p>ab是apachebench命令的缩写，ab命令会创建多个并发访问线程，模拟多个访问者同时对某一URL地址进行访问。它的测试目标是基于URL的，因此，它既可以用来测试apache的负载压力，也可以测试nginx、lighthttp、tomcat、IIS等其它Web服务器的压力。</p>\n\n<p>ab命令对发出负载的计算机要求很低，它既不会占用很高CPU，也不会占用很多内存。但却会给目标服务器造成巨大的负载，其原理类似CC攻击。自己测试使用也需要注意，否则一次上太多的负载。可能造成目标服务器资源耗完，严重时甚至导致死机。</p>\n\n<h2 id=\"命令参数\">命令参数</h2>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>   ab <span class=\"o\">[</span>可选的参数选项] 需要进行压力测试的url\n   此外，我们再根据上面的用法介绍界面来详细了解每个参数选项的作用。\n   <span class=\"nt\">-n</span> 即requests，用于指定压力测试总共的执行次数。\n   <span class=\"nt\">-c</span> 即concurrency，用于指定的并发数。\n   <span class=\"nt\">-t</span> 即timelimit，等待响应的最大时间<span class=\"o\">(</span>单位：秒<span class=\"o\">)</span>。\n   <span class=\"nt\">-b</span> 即windowsize，TCP发送/接收的缓冲大小<span class=\"o\">(</span>单位：字节<span class=\"o\">)</span>。\n   <span class=\"nt\">-p</span> 即postfile，发送POST请求时需要上传的文件，此外还必须设置-T参数。\n   <span class=\"nt\">-u</span> 即putfile，发送PUT请求时需要上传的文件，此外还必须设置-T参数。\n   <span class=\"nt\">-T</span> 即content-type，用于设置Content-Type请求头信息，例如：application/x-www-form-urlencoded，默认值为text/plain。\n   <span class=\"nt\">-v</span> 即verbosity，指定打印帮助信息的冗余级别。\n   <span class=\"nt\">-w</span> 以HTML表格形式打印结果。\n   <span class=\"nt\">-i</span> 使用HEAD请求代替GET请求。\n   <span class=\"nt\">-x</span> 插入字符串作为table标签的属性。\n   <span class=\"nt\">-y</span> 插入字符串作为tr标签的属性。\n   <span class=\"nt\">-z</span> 插入字符串作为td标签的属性。\n   <span class=\"nt\">-C</span> 添加cookie信息，例如：<span class=\"s2\">\"Apache=1234\"</span><span class=\"o\">(</span>可以重复该参数选项以添加多个<span class=\"o\">)</span>。\n   <span class=\"nt\">-H</span> 添加任意的请求头，例如：<span class=\"s2\">\"Accept-Encoding: gzip\"</span>，请求头将会添加在现有的多个请求头之后<span class=\"o\">(</span>可以重复该参数选项以添加多个<span class=\"o\">)</span>。\n   <span class=\"nt\">-A</span> 添加一个基本的网络认证信息，用户名和密码之间用英文冒号隔开。\n   <span class=\"nt\">-P</span> 添加一个基本的代理认证信息，用户名和密码之间用英文冒号隔开。\n   <span class=\"nt\">-X</span> 指定使用的和端口号，例如:<span class=\"s2\">\"126.10.10.3:88\"</span>。\n   <span class=\"nt\">-V</span> 打印版本号并退出。\n   <span class=\"nt\">-k</span> 使用HTTP的KeepAlive特性。\n   <span class=\"nt\">-k</span> 使用HTTP的KeepAlive特性。\n   <span class=\"nt\">-d</span> 不显示百分比。\n   <span class=\"nt\">-S</span> 不显示预估和警告信息。\n   <span class=\"nt\">-g</span> 输出结果信息到gnuplot格式的文件中。\n   <span class=\"nt\">-e</span> 输出结果信息到CSV格式的文件中。\n   <span class=\"nt\">-r</span> 指定接收到错误信息时不退出程序。\n   <span class=\"nt\">-h</span> 显示用法信息，其实就是ab <span class=\"nt\">-help</span>。\n   虽然ab可以配置的参数选项比较多，但是，一般情况下我们只需要使用形如ab <span class=\"nt\">-n</span> 数字 <span class=\"nt\">-c</span> 数字 url路径的命令即可。譬如，我们对位于本地Apache服务器上、URL为localhost/index.的页面进行。测试总次数为1000，并发数为100<span class=\"o\">(</span>相当于100个用户同时访问，他们总共访问1000次<span class=\"o\">)</span>\n</code></pre>  </div></div>\n\n<h2 id=\"应用\">应用</h2>\n\n<p>ab模拟post请求</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>ab <span class=\"nt\">-n</span> 100 <span class=\"nt\">-c</span> 10 <span class=\"nt\">-v</span> 4 <span class=\"nt\">-p</span> <span class=\"s1\">'rule-test.txt'</span> <span class=\"nt\">-T</span> <span class=\"s1\">'application/json'</span> <span class=\"s1\">'http://10.19.248.200:32069/rule/getAction'</span>\n<span class=\"nv\">$ </span><span class=\"nb\">cat </span>rule-test.txt\n<span class=\"o\">{</span>\n<span class=\"s2\">\"eventId\"</span>:<span class=\"s2\">\"6000\"</span>,\n<span class=\"s2\">\"eventValue\"</span>:<span class=\"s2\">\"上海市,上海市,杨浦区\"</span>\n<span class=\"o\">}</span>\n</code></pre>  </div></div>\n<p>输出结果至html</p>\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>ab <span class=\"nt\">-w</span> <span class=\"nt\">-v</span> 2 <span class=\"nt\">-n</span> 100 <span class=\"nt\">-c</span> 20 <span class=\"nt\">-p</span> <span class=\"s1\">'rule-test.txt'</span> <span class=\"nt\">-T</span> <span class=\"s1\">'application/json'</span> <span class=\"s1\">'http://lk-rule-engine-qa.op.laikang.com/rule/getAction'</span> <span class=\"o\">&gt;</span> res.html\n</code></pre>  </div></div>\n","dir":"/tool/","name":"ab.md","path":"tool/ab.md","url":"/tool/ab.html"},{"title":"Idea中引入源码包调试","last_modified_at":"2022-12-20 10:14:28 +0800","layout":"default","content":"{% include common/rest/variables.liquid %}\n\n# Idea中引入源码包调试\n\n## 写在前面\n\n以下内容为笔者实践而来，并结合自己的推测整理。若有不对或疏漏的欢迎交流。\n\n本文以commons-pool为例，介绍如何在Idea中进行源码修改调试。\n\n## 第一种方式\n\n### 原理\n\n将源码以module的形式引入，idea中识别module高于仓库jar，但module引入只限于同级。\n > 优点：修改后运行即可查看\n >\n > 缺点：module有层级限制，且有可能未运行module中的源码包。\n\n### 步骤\n\n1.GitHub上找寻源代码[commons-pool](https://github.com/apache/commons-pool.git)，\nIdea->New project from version controll\n\n > 若未识别maven项目，手动add framework support。已识别则忽略此步骤。\n\n2.打开引用了`commons-pool`依赖的项目，操作`File->New module from existing resource`。将源码包以`module`形式引入。\n \n > 注意：保持引入的module在idea中的显示为同级别module。存在父子module引用，如下图，你需要保证引入的module也在同一级，否则可能仍不是以源码包运行。\n\n <img src=\"{{ base_image_url }}/module-parent.png\" alt=\"image.png\" style=\"zoom: 50%;margin:0px\" />\n\n> 笔者试验当前idea只能引入到与父级同级别，尝试将子module作为单独项目打开引入并运行，如下图，若子module无需依赖其他module，可以运行，但有其他子module依赖，容易报错。若项目只依赖第三方包，可尝试此方法。\n\n<img src=\"{{ base_image_url }}/module-sub.png\" alt=\"image.png\" style=\"zoom:50%;margin:0px\" />\n\n3.验证\n\n引入以后，右边菜单栏->reimporty依赖->找到引用了依赖包处，点击，查看是否跳转到引入的源码中；需要注意的是，此处验证即使能跳转，也有可能还是使用了原先的依赖包中，具体以运行时，断点是否能进入引入的源码包中为准；\n\n## 第二种方式\n### 原理\n本地编译覆盖同组织版本号jar包。\n> 优点：保证运行的即为修改的代码，一般不会有什么奇怪错误产生。\n> \n> 缺点，需重新clean install。\n\n### 步骤\n1. 拉取源码\n2. 本地maven clean install\n3. 项目中reimport\n4. 验证\n> 1. 修改源码，项目中点击应用源码包处，验证否跳转的对应的修改处。\n> \n> 2. 可以从本地仓库中解压对应jar包，查看修改处\n> \n> 注意：版本号要与引入的版本对齐","dir":"/tool/","name":"idea-jar-debug.md","path":"tool/idea-jar-debug.md","url":"/tool/idea-jar-debug.html"},{"title":"Idea常用插件及安装","last_modified_at":"2022-12-21 15:48:40 +0800","layout":"default","content":"{% include common/rest/variables.liquid %}\n\n\n# 常用插件\n```shell\n├── Alibaba_Java_Coding_Guidelines-2.1.1.zip # 代码规约 用于提升代码质量\n├── MavenRunHelper.zip # 用于查看依赖情况\n├── MybatisPlus-1.7.2.zip # 数据库实体生成\n├── RestfulTool-1.4.5.zip # rest请求调试\n├── SequenceDiagram-2.2.0.zip # 时序图\n├── TranslationPlugin-3.3.4.zip # 翻译 需自行申请key\n├── ignore-4.4.2.zip # git ignore模板\n└── spotbugs-idea-1.2.5.zip # bug检测\n```\n# Mac系统上插件安装\nPreference->Plugins->Marketplace\n\n<img src=\"{{ base_image_url }}/idea-plugin-install.png\" alt=\"image.png\" style=\"margin:0px\">\n> 你可以到[官网][plugin-repo]将安装包下载到本地，通过图示的install plugin form disk来离线安装\n\n[plugin-repo]: https://plugins.jetbrains.com/\n\n","dir":"/tool/","name":"idea-plugin.md","path":"tool/idea-plugin.md","url":"/tool/idea-plugin.html"},{"last_modified_at":"2022-12-20 10:15:08 +0800","layout":"default","title":"Idea远程调试","content":"# Idea远程调试\n1. 运行程序处->Edit Configurations，如下图\n\n\t<img src=\"https://img-blog.csdnimg.cn/55bfe368ed0745ceb299283affbd8b71.png#pic_left\" alt=\"在这里插入图片描述\" style=\"margin:0px;zoom:50%;\"/>\n\n\n2. 添加->Remote Jvm Debug\n\t\t![在这里插入图片描述](https://img-blog.csdnimg.cn/353363b4e5024e3ca89940c3428479fe.png#pic_center)\n\n3. 粘贴下图中command line arguments追加至你的java启动命令，host为远程服务器地址，端口即参数中指定的端口号，保持一致。\n\t\t![在这里插入图片描述](https://img-blog.csdnimg.cn/169567c914a04ec9951411f7b4b7c483.png#pic_center)\n\n> 启动脚本参考\n\n```shell\nnohup java -jar \n-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=35005 \n-Djava.rmi.server.hostname=172.21.62.11 \n-Dcom.sun.management.jmxremote=true \n-Dcom.sun.management.jmxremote.port=33346 \n-Dcom.sun.management.jmxremote.authenticate=false \n-Dcom.sun.management.jmxremote.ssl=false -Xss512k -Xmx4g -Xms4g \n-XX:+UseG1GC \n-XX:G1HeapRegionSize=4M -Xloggc:log/gc-%t.log -XX:+UseGCLogFileRotation \n-XX:NumberOfGCLogFiles=14 -XX:GCLogFileSize=100M \n-Dspring.profiles.active=dev *.jar > log/qw-daily.log 2>&1 &\n```","dir":"/tool/","name":"idea-remote-debug.md","path":"tool/idea-remote-debug.md","url":"/tool/idea-remote-debug.html"},{"last_modified_at":"2022-12-20 10:15:08 +0800","layout":"default","title":"Jekyll","content":"# Jekyll\n> 本文是基于Github博客安装的\n\n## Mac安装Jekyll\n\n### 安装ruby\n\nMac自带的ruby，默认为2.6.0，通过以下命令安装的默认为3.0版本 (2022-12-16)\n\n```shell\n$ brew install ruby\n```\n\n注：版本号可通过 `ruby -v`查看，若命令无法识别，查看是否在环境变量中配置\n\n我们需要安装的是2.7版本\n\n> GithubPages目前对Jekyll4.0以上支持不是很友好，所以通过安装ruby2.7版本可以规避一下不必要的问题\n\n```shell\n$ brew install ruby@2.7\n```\n\n下载后注意提示信息\n\n```shell\nIf you need to have ruby first in your PATH run:# 环境变量配置\n echo 'export PATH=\"/usr/local/opt/ruby@2.7/bin:$PATH\"' >> ~/.bash_profile\n\nFor compilers to find ruby you may need to set: # 编译中使用哪个版本\n export LDFLAGS=\"-L/usr/local/opt/ruby@2.7/lib\"\n export CPPFLAGS=\"-I/usr/local/opt/ruby@2.7/include\"\n\nFor pkg-config to find ruby you may need to set:# 包配置\n export PKG_CONFIG_PATH=\"/usr/local/opt/ruby@2.7/lib/pkgconfig\"\n```\n\n依据提示设置环境变量\n\n```shell\n# 环境变量设置 你可能还会设置在 ~/.zshrc \n# 设置之后生效。你的文件若是.zshrc 则source ~/.zshrc\n$ source ~/.bash_profile \n# 设置完后，查看gem\n$ gem env\nRubyGems Environment:\n - RUBYGEMS VERSION: 3.3.26\n - RUBY VERSION: 2.7.7 (2022-11-24 patchlevel 221) [x86_64-darwin21]\n - INSTALLATION DIRECTORY: /usr/local/lib/ruby/gems/2.7.0\n - USER INSTALLATION DIRECTORY: /Users/zhanghaoyou/.gem/ruby/2.7.0\n - RUBY EXECUTABLE: /usr/local/opt/ruby@2.7/bin/ruby\n - GIT EXECUTABLE: /usr/bin/git\n - EXECUTABLE DIRECTORY: /usr/local/lib/ruby/gems/2.7.0/bin\n - SPEC CACHE DIRECTORY: /Users/zhanghaoyou/.gem/specs\n - SYSTEM CONFIGURATION DIRECTORY: /usr/local/Cellar/ruby@2.7/2.7.7/etc\n - RUBYGEMS PLATFORMS:\n - ruby\n - x86_64-darwin-21\n - GEM PATHS:\n - /usr/local/lib/ruby/gems/2.7.0\n - /Users/zhanghaoyou/.gem/ruby/2.7.0\n - /usr/local/Cellar/ruby@2.7/2.7.7/lib/ruby/gems/2.7.0\n - GEM CONFIGURATION:\n - :update_sources => true\n - :verbose => true\n - :backtrace => true\n - :bulk_threshold => 1000\n - REMOTE SOURCES:\n - https://rubygems.org/\n - SHELL PATH:\n - /usr/local/opt/ruby@2.7/bin\n - /Users/zhanghaoyou/.nvm/versions/node/v14.20.0/bin\n - /usr/local/bin\n - /usr/local/sbin\n - /usr/local/bin\n - /usr/bin\n - /bin\n - /usr/sbin\n - /sbin\n - /usr/local/scala/bin\n - /Users/zhanghaoyou/Library/Android/sdk/platform-tools\n - /Users/zhanghaoyou/Library/Android/sdk/ndk-bundle\n - /Library/Java/JavaVirtualMachines/jdk1.8.0_321.jdk/Contents/Home/bin\n```\n注：INSTALLATION DIRECTORY 该目录有可能不是你的安装目录，gem install的时候注意查看\n\n### 安装bundle\n\n```shell\n$ gem install bundle\n# 若你想通过gem直接安装jekyll，也是可以的，但是建议通过在github博客中的Gemfile配置\n# 你的jekyll版本会根据ruby编译的版本寻找，若是4.0之上版本，可能会带来一些不必要的麻烦\n$ gem install jekyll\n# 默认安装的jekyll不在环境变量中 需到gem安装的目录下找到对应的安装包设置bin环境变量\n$ jekyll -v\n```\n_更多参考[jekyll安装][jekyll-config]_\n\n## Github中应用jekyll\n\n> Github配置可查看官网或其他博客，以下介绍命令使用\n\n将你的博客代码pull至本地，切换对应的工作目录\n```shell\n# 若你的目录下无Gemfile 执行以下命令 有则忽略\n$ bundle init\n# 创建后执行\n$ bundle install \n```\n> Gemfile文件内容参考，若初次使用直接使用默认配置，根据需要添加插件\n\n```\n# frozen_string_literal: true\nsource \"https://rubygems.org\"\n\n# gem \"rails\"\ngem \"jekyll\", \"~> 3.9.0\"\ngem \"webrick\", \"~> 1.7\"\ngem \"github-pages\", group: :jekyll_plugins\n# gem 'jekyll-rtd-theme', '~> 2.0', '>= 2.0.10'\ngem \"minima\"\n```\n\n通过bundle执行jekyll命令\n```shell\n# 清理\n$ bundle exec jekyll clean \n# 构建\n$ bundle exec jekyll build\n# 启动\n$ bundle exec jekyll server\n```\n## Jekyll主题应用\n\n> 以jekyll-rtd-theme为例\n\n1.github中找到喜欢的主题，将其推送至你的仓库，你的仓库名应该为`yourname/youname.github.io`\n\n> 你可以通过fork的形式，或clone下来推送至你的项目\n> \n> 注意：阅读主题的说明文件，将有助于你避免不必要的麻烦\n\n2.依据你的需要修改配置文件\n\n> 参考配置文件\n\n`Gemfile`\n\n```Gemfile\nsource \"https://rubygems.org\" # source \"https://gems.ruby-china.com\"\n\ngemspec\n\n# github pages\ngem \"github-pages\", group: :jekyll_plugins\n\n# 时间插件\ngroup :jekyll_plugins do\n gem \"jekyll-last-modified-at\"\nend\n```\n`_config.yml`\n\n```yaml\ntitle: Youzhanghao's Blog\ndescription: Record Something\nauthor: youzhanghao\n# 主题\ntheme: jekyll-rtd-theme\n# 编码\nencoding: utf-8\n# 时区\ntimezone: Asia/Shanghai\n\n# debug是否开启\n#debug:\n# compress: true\n# dist: false\n# shortcodes: true\n\nreadme_index:\n with_frontmatter: true\n# 应用插件\nplugins:\n - jemoji\n - jekyll-avatar\n - jekyll-mentions\n - jekyll-last-modified-at\n# 排除在外的打包文件\nexclude:\n - Makefile\n - CNAME\n - LICENSE\n - update.sh\n - Gemfile\n - Gemfile.lock\n - requirements.txt\n - node_modules\n - package.json\n - package-lock.json\n - webpack.config.js\n - jekyll-rtd-theme.gemspec\n - test\n\n# Optional. The default date format, used if none is specified in the tag.\nlast-modified-at:\n date-format: '%Y-%m-%d %H:%M:%S'\n use-git-cache: true\n```\n3.拓展修改\n\n> 以添加创建时间和更新时间为例\n\n修改`_includes/templates/content.liquid`\n```html\n{% raw %}\n<div class=\"content p-3 p-sm-5\">\n {% include templates/breadcrumbs.liquid %}\n <hr>\n {% include common/rest/variables.liquid param=\"schema_date\" %}\n <p><em >发布时间：{{ schema_date | date:\"%Y-%m-%d %H:%M:%S\" }}</em>\n <em style=\"float:right\">更新时间：{% last_modified_at %}</em></p>\n <div role=\"main\" itemscope=\"itemscope\" itemtype=\"https://schema.org/Article\">\n <div class=\"markdown-body\" itemprop=\"articleBody\">\n {{ content }}\n </div>\n </div>\n {% include templates/footer.liquid %}\n </div>\n{% endraw %}\n```\n4.可能的问题\n\n在markdown文件里无法使用page变量等\n> 可能和编译的先后顺序有关，暂未定为根本原因，可以通过引入variable中的变量来使用，添加如下：\n> {% raw %}\n> {% include common/rest/variables.liquid param=\"schema_date\" %}\n> {% endraw %}\n\n5.延伸阅读\n\n[Github page的配置和快速发布][github-config]\n\n[jekyll-config]: /others/jekyll-install\n[github-config]: /others/github-push","dir":"/tool/","name":"jekyll.md","path":"tool/jekyll.md","url":"/tool/jekyll.html"},{"title":"maven依赖管理","last_modified_at":"2022-12-20 10:14:28 +0800","layout":"default","content":"{% include common/rest/variables.liquid %}\n\n# maven依赖管理\n\n## 查看依赖\n1.通过命令查看依赖树\n\n`❯ mvn dependency:tree`\n\n建议输出到文本中查看\n\n`❯ mvn dependency:tree > dep.txt`\n\n2.Idea中下载插件maven helper，在你的pom文件底部将会多出dependency analyzer。\n\n_如何安装_：参考[Idea常用插件及安装][idea-plugin]\n\n<img src=\"{{ base_image_url }}/maven-helper.png\" alt=\"image.png\" style=\"zoom:50%;margin:0px\">\n\n## Springboot依赖管理\n### pom中dependency标签引入\n```xml\n <!-- 链路追踪 -->\n <dependency>\n <groupId>org.apache.skywalking</groupId>\n <artifactId>apm-toolkit-trace</artifactId>\n <version>8.9.0</version>\n </dependency>\n```\n### 父pom的properties版本号覆盖（重点）\n> 现在spring新系列都采用此种方式，不要再随意的引入和exclude方式去做，容易\n造成依赖混乱不清\n> \n引入方式：parent标签声明依赖管理\n\n```xml\n <!--声明依赖管理-->\n <parent>\n <groupId>org.springframework.boot</groupId>\n <artifactId>spring-boot-starter-parent</artifactId>\n <version>2.1.2.RELEASE</version>\n </parent>\n <!--内部版本号管理-->\n <properties>\n <java.version>1.8</java.version>\n <commons-pool2.version>2.9.0</commons-pool2.version>\n <jedis.version>3.6.0</jedis.version>\n </properties>\n```\n> 一般情况不建议私自改动版本号，可能会存在兼容问题\n> \n>如上改了之后，你的项目在应用redis连接池，会有错误\n\n因为2.1.2.RELEASE的父pom文件中，高版本的jedis无法兼容starter-data-redis\n\n_查看父pom文件_：idea中点击`2.1.2.RELEASE`进入父pom，父pom文件继续点击`spring-boot-dependencies`中`2.1.2.RELEASE`\n进入`spring-boot-dependencies`，可以看到`spring-boot-starter-data-redis`是固定的\n```xml\n <dependency>\n <groupId>org.springframework.boot</groupId>\n <artifactId>spring-boot-starter-data-redis</artifactId>\n <version>2.1.2.RELEASE</version>\n </dependency>\n```\n_兼容版本查看方法_：进入到[maven库][maven-repo]，搜索你需要的依赖，以jedis为例\n\n<img src=\"{{ base_image_url }}/maven-dep.png\" alt=\"image.png\" style=\"zoom:50%;margin:0px\">\n\n### spring-boot低版本升级jedis至3.6.0版本\n直接升级`spring-boot-starter-data-redis`，`spring-boot-starter-data-redis`\n是由内部的`spring-data-redis`管理jedis版本，通过maven仓库查找[对应版本][spring-data-redis]，发现2.5.1版本开始支持3.6.0\n，升级`spring-boot-starter-data-redis`至该版本即可\n```xml\n <dependency>\n <groupId>org.springframework.boot</groupId>\n <artifactId>spring-boot-starter-data-redis</artifactId>\n <version>2.5.1</version>\n </dependency>\n```\n_jedis为何升级3.6.0版本_：阅读[jedis连接池泄漏][jedis-pool]\n\n[idea-plugin]: idea-plugin\n[maven-repo]: https://mvnrepository.com/\n[spring-data-redis]:https://mvnrepository.com/artifact/org.springframework.data/spring-data-redis/2.5.1\n[jedis-pool]: ../questions/jedis-pool-qa","dir":"/tool/","name":"maven-dependency.md","path":"tool/maven-dependency.md","url":"/tool/maven-dependency.html"},{"last_modified_at":"2022-12-13 13:58:48 +0800","permalink":"//","layout":"default","title":"publish my blog","content":"# publish my blog","dir":"/","name":"README.md","path":"README.md","url":"/"},{"title":"@Cacheable源码解读","last_modified_at":"2022-12-21 18:03:00 +0800","layout":"default","content":"<h1 id=\"cacheable源码解读\">@Cacheable源码解读</h1>\n","dir":"/java/","name":"cacheAsspectSupport-read.md","path":"java/cacheAsspectSupport-read.md","url":"/java/cacheAsspectSupport-read.html"},{"title":"低版本中Jedis对象泄漏证明及探究","last_modified_at":"2022-12-20 10:14:28 +0800","layout":"default","content":"# 低版本中Jedis对象泄漏证明及探究\n> 以下内容为笔者实践而来，并结合自己的推测整理。若有不对或疏漏的欢迎交流。\n\n## 前置条件\n\n> 低版本目前查看版本源码，为3.6.0版本以下，不含3.6.0版本\n> \n> 笔者所用版本: jedis 2.9.0版本 spring-boot-starter-data-redis：2.1.2.RELEASE\n\n*版本查看*参考[maven依赖管理][maven-dep]\n\n## 证明\n方法有多种，主要抓住何时生成对象，何时销毁对象，本文以@Cacheable为例\n\n项目中新建一个类，`IRedisCacheWriter`，该类从源码包`DefaultRedisCacheWriter`拷贝而来，只做日志打印，方便调试\n> 需要注意的是，你需要在`CacheManager`注入自定义的`IRedisCacheWriter`\n\n代码如下\n\n```java\n\t\t\t@Configuration\n @EnableCaching\n public class RedisConfig implements Serializable {\n \n \n \n @Bean\n public RedisCacheManager cacheManager(RedisConnectionFactory redisConnectionFactory) {\n return new RedisCacheManager(\n new IRedisCacheWriter(redisConnectionFactory),\n //实时数据 就是默认数据 缓存时间设置\n this.getRedisCacheConfigurationWithTtl(60), // 默认策略，未配置的 key 会使用这个\n this.getRedisCacheConfigurationMap() // 指定 key 策略\n );\n }\n \n private Map<String, RedisCacheConfiguration> getRedisCacheConfigurationMap() {\n Map<String, RedisCacheConfiguration> redisCacheConfigurationMap = new HashMap<>();\n //历史数据缓存24小时\n redisCacheConfigurationMap.put(\"history\", this.getRedisCacheConfigurationWithTtl(60 * 60*23));\n \n return redisCacheConfigurationMap;\n }\n \n private RedisCacheConfiguration getRedisCacheConfigurationWithTtl(Integer seconds) {\n Jackson2JsonRedisSerializer<Object> jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<>(Object.class);\n ObjectMapper om = new ObjectMapper();\n om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n jackson2JsonRedisSerializer.setObjectMapper(om);\n RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration.defaultCacheConfig();\n redisCacheConfiguration = redisCacheConfiguration.serializeValuesWith(\n RedisSerializationContext\n .SerializationPair\n .fromSerializer(jackson2JsonRedisSerializer)\n ).entryTtl(Duration.ofSeconds(seconds));\n \n return redisCacheConfiguration;\n }\n }\n```\n\n```java\n\n@Slf4j\nclass IRedisCacheWriter implements RedisCacheWriter {\n\n\tprivate final RedisConnectionFactory connectionFactory;\n\tprivate final Duration sleepTime;\n\n\t// ... 代码省略\n\t\n\t/**\n\t * @return {@literal true} if {@link RedisCacheWriter} uses locks.\n\t */\n\tprivate boolean isLockingCacheWriter() {\n\t\treturn !sleepTime.isZero() && !sleepTime.isNegative();\n\t}\n\n\tprivate <T> T execute(String name, Function<RedisConnection, T> callback) {\n\n\t\tRedisConnection connection = connectionFactory.getConnection();\n\t \tlog.info(\"-----连接已获得-------\");\n\t\ttry {\n\n\t\t\tcheckAndPotentiallyWaitUntilUnlocked(name, connection);\n\t\t\treturn callback.apply(connection);\n\t\t} finally {\n\t\t\tconnection.close();\n\t\tlog.info(\"-----连接已释放-------\");\n\t\t}\n\t}\n\n}\n\n```\n```java\n @Override\n public void close() {\n log.info(\"--- jedis jar close func---\");\n if (dataSource != null) {\n Pool<Jedis> pool = this.dataSource;\n // 只有进入该方法 才会释放对象\n log.info(\"--- jedis close dataSource---\");\n this.dataSource = null;\n if (client.isBroken()) {\n this.dataSource.returnBrokenResource(this);\n } else {\n this.dataSource.returnResource(this);\n }\n } else {\n super.close();\n }\n }\n```\nab并发调用接口，获取日志文件。笔者压测50个并发，总数1000个，ab脚本如下\n```shell\n❯ ab -n 1000 -c 50 -p postOrg_data.txt -T 'application/json' localhost:28080/schedual/postOrg/countDistinctByRangeDateAndOrgId\n```\njedis配置如下\n```yaml\n jedis:\n pool:\n # 连接池中的最小空闲连接\n min-idle: 1\n # 连接池中的最大空闲连接\n max-idle: 2\n # 连接池的最大数据库连接数\n max-active: 2\n```\n压测后，调用接口，查看是否接口报错，若无报错，可适当调整并发数。\n\n笔者在压测后，调用接口，已不可用，并报无法从redis连接池拿到连接`Could not get a resource from the pool`\n\n最终观察日志，你会发现`连接已获得的次数=连接已释放的次数=jedis jar close func的次数`，而这些次数 - (max-idle)刚好是`jedis close dataSource的次数`。\n\n也就是说在整个压测过程中，虽然连接似乎被释放了，但所创建的对象，并未回收。也就证明了，连接创建对象存在泄漏。\n\n## 探究\n通过日志，我们大致可以确定是`this.dataSource`出现了为null的情况，那么我们仔细寻找`dataSource`是在哪里被设置值，又是哪里被释放的\n\n被赋予值\n```java\n @Override\n public Jedis getResource() {\n Jedis jedis = super.getResource();\n // 设置dataSource\n jedis.setDataSource(this); // <-- This line \n return jedis;\n }\n```\n释放值\n```java\n@Override\npublic void close() {\n if (dataSource != null) {\n if (client.isBroken()) {\n this.dataSource.returnBrokenResource(this);\n } else {\n this.dataSource.returnResource(this);\n }\n this.dataSource = null; // <-- This line \n } else {\n super.close();\n }\n}\n```\n1. 当线程A归还对象后，但还未运行至`this.dataSource = null`\n2. 线程B借了对象之后，并且设置了`dataSource`\n3. 然后线程A运行至`this.dataSource = null`\n4. 最后线程B永远无法归还对象，因为`dataSource`为null了\n\n其实这个问题早被提出了，参考 [issue-1920][issue1920]。\n\n这个bug也在[这段代码][bug-fix]中被修复了，所以升级jedis版本，你主要关注此段代码就可以了。\n\n> 你是否有这样的疑问，为什么不使用原子性去控制该变量\n\n关于这个问题，其实也有讨论，参考[fix-1920][issue-dis]\n\n> 大致就是作者觉得`returnBrokenResource/returnResource`是有锁控制的，不需要再额外去做原子性了。具体怎么控制，读者可以自行研究。\n\n\n[maven-dep]: ../tool/maven-dependency\n[issue1920]: https://hub.nuaa.cf/redis/jedis/issues/1920\n[bug-fix]: https://hub.nuaa.cf/redis/jedis/pull/1918/commits/df1bffa3c77f4ede4c912f2c3e78b5c8857725e7\n[issue-dis]: https://hub.nuaa.cf/redis/jedis/commit/02f2cc5cce2f44efeaaafe351a2facf66988ddbf#diff-df2421269af8d142bf842cb0141f3a95R3639","dir":"/java/","name":"jedis-pool.md","path":"java/jedis-pool.md","url":"/java/jedis-pool.html"},{"title":"redis配置解读","last_modified_at":"2022-12-21 17:56:21 +0800","layout":"default","content":"# redis配置解读","dir":"/java/","name":"redis-config.md","path":"java/redis-config.md","url":"/java/redis-config.html"},{"last_modified_at":"2022-12-20 10:15:08 +0800","layout":"default","title":"Markdown","content":"\n# Markdown\n\n​\t\n\n## 目录\n\n一. [概述](#概述)\n\n 1. [核心理念](#核心理念)\n 2. [名词解释](#名词解释)\n 3. [编辑器](#编辑器)\n\n二. [语法](#语法)\n\n1. [标题](#标题)\n2. [文本](#文本)\n3. [字体和线](#字体和线)\n4. [列表](#列表)\n 1. [有序列表](#有序列表)\n 2. [无序列表](#无序列表)\n 3. [复选框列表](#复选框列表)\n5. [表格](#表格)\n6. [链接](#链接)\n 1. [文字链接](#文字链接)\n 2. [图片链接](#图片链接)\n 3. [锚点](#锚点)\n7. [块引用](#块引用)\n8. [代码块](#代码块)\n9. [表情](#表情)\n10. [相关参考](#相关参考)\n\n---\n\n### 写在前面\n\n***\n\n*限于只花了较短时间写Markdown笔记及总结，如有错误及疏漏，欢迎交流。*\n\n\n### 概述\n\n***\n\n#### 核心理念\n\nMarkdown 致力于使阅读和创作文档变得容易。\n\n* 特点：简洁简易\n* 应用场景：叙述，说明，博客，Git，wiki...\n\n#### 名词解释 \n\n*以下两个概念引入HTML标签中的概念，对Markdown中做出的解释*\n\n* 块级元素\n\n >块级元素占据其父元素（容器）的整个空间，因此创建了一个“块”\n >\n >[了解更多][block]\n\n* 内联元素\n\n >一个行内元素只占据它对应标签的边框所包含的空间\n >\n >[了解更多][line]\n\n#### 编辑器\n\n关于编辑器，由于笔者也只是用了较短时间。目前只能给出笔者正在使用的。\n\nMac系统 : [typora][typora]\n\n缺点：HTML语法不能preview ，某些修改需要打开源码格式修改\n\n其他：待机智的你发现\n\n[了解更多][editor]\n\n### 语法\n\n***\n\n#### 标题\n\nMarkdown 支持两种形式的标题, Setext 和 atx.\n\n~~~text\nSetext 样式的标题使用的等号来表示一级标题, 使用连字符表示二级标题. \n[Setext]\nThis is an H1\n=============\n\nThis is an H2\n-------------\nAtx 样式的标题每行开头使用 1-6 井号, 对应 1-6 级标题\n[Atx]\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n~~~\n\n*注：官方还提供如下功能，但实测未生效，待机智的你~*\n~~~text\n可选地, 你可以 \"关闭\" atx 样式的标题. 这纯粹是美化需要 -- 如果你认为这样美观一些就用吧. 关闭标签的井号数量甚至不需要和起始位置的匹配. (起始的井号数量决定了标题的级别.) \n\n# This is an H1 #\n\n## This is an H2 ##\n\n### This is an H3 ######\n~~~\n\n\n\n#### 文本\n\n\n~~~text\n普通文本\n单行文本 行头加入一个tab或4个空格\n~~~\n\n~~~text\n文本块 \n1.在连续几行的文本开头加入1个tab或者4个空格 此种方式只是将每一行拼接为块\n2.块头和块尾 加入一对三个的反引号 推荐 更符合块的定义\n~~~\n\n**文本换行**\n\n```text\n1.上行文本后面补两个空格\n2.两行文本直接加一个空行 该种方式行距较大 已经有点偏向段落 不推荐\n```\n\n第一行 \n第二行 \n\n\n\n#### 字体和线\n\n**文字标签**\n\n~~~text\n文字标签功能使行内部分文字块，使用一对反引号。\n语法：\n`linux`、`markdown`\n~~~\n效果：`linux` `markdown`\n\n**水平线**\n\n```text\n***、---、___可以显示水平线效果\n```\n\n**斜体、粗线、删除线**\n\n| 语法 | 效果 |\n| ---------------------- | -------------------- |\n| `*斜体1*` | *斜体1* |\n| `_斜体_` | _斜体2_ |\n| `**粗体1**` | **粗体1** |\n| `__粗体2__` | __粗体2__ |\n| `~~删除线~~` | ~~删除线~~ |\n| `***斜粗体***` | ***斜粗体*** |\n| `***~~斜粗体删线~~***` | ***~~斜粗体删线~~*** |\n| `~~***斜粗提删线***~~` | ~~***斜粗体删线***~~ |\n| `~~___斜粗体删线___~~` | ~~___斜粗体删线___~~ |\n|备注：斜体、粗体、删除线可混合使用||\n\n\n\n#### 列表\n\n##### 无序列表\n\n`*` `-`\n\n- 昵称\n- 爱好\n - 足球\n - 篮球\n\n##### 有序列表\n\n`数字加点加空格`\n\n面向对象的三个基本特征：\n\n1. 封装\n 1. 巨人的第一道墙壁\n 2. 巨人的第一道墙壁\n 1. 巨人的第二道墙壁\n2. 继承\n3. 多态\n\n*注意：* 此处根据编辑器不同 多层列表符号可能不同\n\n##### 复选框列表\n\n`-[] `\n\n- [ ] 需求分析\n\n`-[x]`\n\n- [x] 选中\n\n#### 表格\n\n```text\n|表头1|表头2|\n|---|---|\n|表格单元|表格单元|\n|:---| 左对齐\n|:---:| 居中\n|---:| 右对齐\n```\n\n| 语法 | 效果 |\n| ------------------------------ | ------------------------ |\n| `|表格单元带~~删除线~~|` | \\|表格单元带~~删除线~~\\| |\n| 注意：单元格可混合其他基本语法 | |\n\n\n\n#### 链接\n\n##### 文字链接\n\n| # | 语法 | 效果 |\n| ---- | ----------------------------------------- | --------------------------------------- |\n| 1 | `[百度](http://www.baidu.com \"悬停显示\")` | [百度](http://www.baidu.com \"悬停显示\") |\n| 2 | `[百度][baidu]` | [百度][baidu] |\n\n语法2由两部分组成:\n\n- 两个中括号,[]里的标识符，markdown文中需定\n\n- 地址是相对路径也可 但不建议\n\n> `[baidu]: https://www.baidu.com`\n>\n> 使用URL标识符能达到复用的目的，一般全文所有URL标识符统一放在文末定义，简洁\n\n##### 图片链接\n\n基本格式\n\n```![alt](URL title)```\n\nalt和title即对应HTML中的Alt和title属性(都可省略):\n\n- alt表示图片显示失败时的替换文本\n- title表示鼠标悬停在图片时的显示文本\n- URL即图片的URL地址 *本地jeklly 测试时不要写localhost*\n\n| # | 语法 | 效果 |\n| ---- | ---------------------------------------------------------- | -------------------------------------------------------- |\n| 1 | `![baidu](http://www.baidu.com/img/bdlogo.gif \"百度logo\")` | ![baidu](http://www.baidu.com/img/bdlogo.gif \"百度logo\") |\n| 2 | `![][foryou]` | ![][foryou] |\n\n***注意：*** 例2写法使用**URL标识符**的形式\n\n> 文中定义[foryou]的路径\n\n```text\n[foryou]:https://github.com/guodongxiaren/ImageCache/raw/master/Logo/foryou.gif\n```\n\n##### 锚点\n\n每个标题即是一个锚点\n\n| 语法 | 效果 |\n| ----------------- | ----------------- |\n| `[回到目录](#目录)` | [回到目录](#目录) |\n\n**注意：**锚点是通过“()”中的索引定位，而链接是通过\"[]\"中的索引定位。\n\n#### 块引用\n\n`>`\n\n**常用场景：常用于引用文本**\n\n​\t《假如生活欺骗了你》是俄国诗人普希金于1825年流放南俄敖德萨同当地总督发生冲突后，被押送到其父亲的领地米哈伊洛夫斯科耶村幽禁期间创作的一首诗歌。诗歌全文表述了一种积极乐观而坚强的人生态度，并且因它亲切和蔼的口气让许多人把它记于自己的笔记本上，成为了激励自己勇往直前，永不放弃的座右铭。\n\n>创作背景： \n>\n>​\t该诗写于1825年，正是普希金流放南俄敖德萨同当地总督发生冲突后，被押送到其父亲的领地米哈伊洛夫斯科耶村幽禁期间所作。从1824年8月至1826年9月，是一段极为孤独寂寞的生活。那时俄国革命如火如荼，诗人却被迫与世隔绝。在这样的处境下，诗人仍没有丧失希望与斗志，他热爱生活，执著地追求理想，相信光明必来，正义必胜。\n\n**块引用多级结构**\n\n> 数据结构\n>\n> > 树\n> >\n> > > 二叉树\n\n#### 代码块\n\n在三个反引号后面加上编程语言的名字，另起一行开始写代码，最后一行加三个反引号\n\n```java\npublic static void main(String[] args){} \n```\n\n~~~php\n<?php echo \"hello world\";\n~~~\n\n**diff语法 **\n\n版本控制的系统中都少不了diff的功能，即展示一个文件内容的增加与删除。\nGFM中可以显示的展示diff效果。使用绿色表示新增，红色表示删除。\n\n其语法与代码高亮类似，只是在三个反引号后面写diff，\n并且其内容中，以 `+ `开头表示新增，`- `开头表示删除。\n\n~~~text\n```diff\n+ 假如生活欺骗了你\n+ 不要悲伤，不要心急\n+ 忧郁的日子里须要镇静：\n+ 相信吧，快乐的日子将会来临！\n+ 心儿永远向往着未来；\n- 现在却常是忧郁。\n```\n~~~\n\n```diff\n+ 假如生活欺骗了你\n+ 不要悲伤，不要心急\n+ 忧郁的日子里须要镇静：\n+ 相信吧，快乐的日子将会来临！\n+ 心儿永远向往着未来；\n- 现在却常是忧郁。\n```\n\n#### 表情\n\nGithub的Markdown语法支持添加emoji表情，输入不同的符号码（两个冒号包围的字符）可以显示出不同的表情。\n\n比如`:blush:` 可以显示 :blush:\n\n更多请查询官方网页[http://www.emoji-cheat-sheet.com](http://www.emoji-cheat-sheet.com)\n\n\n\n### 相关参考 \n\n>1. [Markdown中文文档][MarkdownCN]\n>2. [README文件语法解读][Flavored]\n\n***\n\n\n\n\n\n\n\n[block]:https://developer.mozilla.org/zh-CN/docs/Web/HTML/Block-level_elements \"块级元素\"\n[typora]: https://typora.io/\t\"typora官方\"\n[foryou]: https://github.com/guodongxiaren/ImageCache/raw/master/Logo/foryou.gif\n[editor]: https://www.zhihu.com/question/22700184\t\"Mac markdown editor\"\n[baidu]: Https://www.baidu.com\t\"百度\"\n[MarkdownCN]: https://markdown-zh.readthedocs.io/en/latest/\t\"Markdown CN docs\"\n[Flavored]: https://github.com/guodongxiaren/README\n[line]: https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements\t\"行内元素\"","dir":"/others/","name":"2018-06-03-markdown.markdown","path":"others/2018-06-03-markdown.markdown","url":"/others/2018-06-03-markdown.html"},{"last_modified_at":"2022-12-20 17:26:01 +0800","layout":"default","title":"Github Pages","content":"# Github Pages\n\n## Github 配置\n![config][github-config]\n## Github 推送\n```shell\n# 进入到项目目录\n# 切换到对应分支 不建议于master修改，切一个隶属于你自己的分支\n❯ git checkout -b feature-name\n# 添加subtree子仓库的目录 该目录无需事先创建 确保有权限创建目录\n# 确保已有gh-pages分支，并将该分支内容清空 \n# 参考命令\n# git checkout gh-pages\n# git rm -r --cached * && git commit -m \"init gh-pages\" && git push \n# 第一次需要执 subtree add，docs目录要被git跟踪\n❯ git subtree add --prefix=docs origin gh-pages\ngit fetch origin gh-pages\nFrom github.com:youzhanghao/youzhanghao.github.io\n * branch gh-pages -> FETCH_HEAD\nAdded dir 'docs'\n# 编译生成_site 内容 _site不被git跟踪\n❯ bundle exec jekyll build\n# 将内容拷贝到docs\n❯ cp -r _site/* docs/\n# 本地内容提交到仓库\n❯ git commit -m\"init pages\" && git push\n# docs文件夹内容推到gh-pages\n# 若提示需要先pull更新，执行以下命令\n# git subtree pull --prefix=docs origin gh-pages\n# 若提示需要合并，命令末尾添加 --squash\n# git subtree pull -P docs origin gh-pages --squash -d\n❯ git subtree push --prefix=docs origin gh-pages\n# 注：每个命令执行，注意查看输出 subtree 添加 -d 开启debug\n# 若要删除subtree，直接删除对应目录，并commit\n```\n[github-config]: /assets/images/github-config.png","dir":"/others/","name":"github-push.md","path":"others/github-push.md","url":"/others/github-push.html"},{"last_modified_at":"2022-12-20 10:15:08 +0800","layout":"default","title":"Jekyll安装","content":"\n\n# Jekyll安装\n## 安装ruby\n\nMac自带的ruby，默认为2.6.0，无法满足要求，需要安装3.0以上版本\n\n ```shell\n brew install ruby\n ```\n\n注：版本号可通过 `ruby -v`查看，若命令无法识别，查看是否在环境变量中配置\n\n## 安装Jekyll\n\n```shell\ngem install jekyll bundler\n```\n\n注：验证gem是否安装正确，可以查看对应目录\n\n```shell\n❯ ls ~/.gem/ruby/\n2.6.0 3.0.0\n❯ ls ~/.gem/ruby/3.0.0/bin\nbundle bundler jekyll\n```\n\n设置环境变量\n\n```\necho `export PATH=$PATH:$HOME/.gem/ruby/3.0.0/bin` ~/.bash_profile\nsource ~/.bash_profile\n```\n\n注：无`.bash_profile`自行创建，或者创建软链到该目录，或者直接切到该目录执行(如果不嫌麻烦)。\n\n## 验证\n\n```shell\n❯ jekyll -v\njekyll 4.3.1\n```\n\n## 可能遇到的问题\n[gem安装扩展失败][1]\n\n[cannot load such file – webrick][2]\n\n注：ruby配置脚本说明\n\n```shell\nruby is keg-only, which means it was not symlinked into /usr/local,\nbecause macOS already provides this software and installing another version in\nparallel can cause all kinds of trouble.\n\nIf you need to have ruby first in your PATH run:\n echo 'export PATH=\"/usr/local/opt/ruby/bin:$PATH\"' >> ~/.bash_profile\n\nFor compilers to find ruby you may need to set: 编译中使用\n export LDFLAGS=\"-L/usr/local/opt/ruby/lib\"\n export CPPFLAGS=\"-I/usr/local/opt/ruby/include\"\n\nFor pkg-config to find ruby you may need to set:\n export PKG_CONFIG_PATH=\"/usr/local/opt/ruby/lib/pkgconfig\"\n```\n\n\n\n[1]:https://hub.nuaa.cf/ffi/ffi/issues/653\n[2]:https://talk.jekyllrb.com/t/load-error-cannot-load-such-file-webrick/5417","dir":"/others/","name":"jekyll-install.md","path":"others/jekyll-install.md","url":"/others/jekyll-install.html"},{"sort":1,"last_modified_at":"2022-12-20 10:15:08 +0800","layout":"default","title":"变量与基本类型","content":"<h1 id=\"变量与基本类型\">变量与基本类型</h1>\n<h2 id=\"特殊字符\">特殊字符</h2>\n\n<ul>\n <li>井号(#) 表示之后的字符为Python注释</li>\n <li>换行(\\n) 是标准的行分割符（通常一个语句一行）</li>\n <li>反斜线(\\) 继续上一行 <em>建议采用闭合符号替代</em></li>\n <li>分号(;) 将两个语句连接在一行中 <em>不提倡</em></li>\n <li>冒号(:) 将代码块的头和体分开</li>\n <li>语句(代码块) 用缩进块的方式体现</li>\n <li>不同的缩进深度分割不同的代码块</li>\n <li>Python文件以及模块的形式组织</li>\n</ul>\n\n<p><strong>模块</strong>：每个Python脚本都是可以被当成模块，模块变得过大，并且驱动太多功能的话，就应该考虑拆一些代码出来构建另一个模块。</p>\n\n<h2 id=\"变量赋值\">变量赋值</h2>\n\n<ul>\n <li>等号(=)是主要的赋值操作符 （其他的都是增量赋值操作符）</li>\n</ul>\n\n<blockquote>\n <p><em>注：</em></p>\n\n <p>Python赋值是引用传递</p>\n\n <p>Python赋值语句不会返回值 在C语言中成立</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># 赋值语句不是合法表达式\n</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"c1\"># 链式赋值\n</span><span class=\"n\">x</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span> <span class=\"c1\"># 增量赋值\n</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"c1\"># 多重赋值\n</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"s\">'a string'</span><span class=\"p\">)</span> <span class=\"c1\"># mul-tuple \"多元\"赋值\n</span></code></pre>  </div></div>\n\n<blockquote>\n <p>增量赋值相对普通赋值不仅仅是写法的改变，可变对象会被就地修改，不可变对象会重新分配一个对象</p>\n\n <p>多重赋值 上例中一个1的整型对象被创建，该对象的同一个引用被赋值给x,y,z。也就是一个对象赋给了多个变量。</p>\n\n <p>多个变量同时赋值，等号两边都是元组，此处括号建议加上</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Python中交换值\n</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>标识符</li>\n</ul>\n\n<blockquote>\n <p>作为名字的有效字符集合 关键字 保留字</p>\n\n <p>合法的Python标识符 同C语言</p>\n</blockquote>\n\n<ul>\n <li>专用下划线标识符</li>\n</ul>\n\n<blockquote>\n <p>_xxx 不用 ‘from module import *’ 导入</p>\n\n <p>_<em>xxx_</em> 系统定义名字</p>\n\n <p>_xxx 类中私有变量 注意这点</p>\n</blockquote>\n\n<h2 id=\"基本风格指南\">基本风格指南</h2>\n\n<ul>\n <li>注释 简洁、优雅、准确</li>\n <li>文档 __doc__ obj.__doc__ 访问第一个没有赋值的字符串 用的很少</li>\n <li>缩进 注意tab和空格保持其中一种一致 建议使用空格 不同编辑器tab可能不一致</li>\n</ul>\n\n<blockquote>\n <p>小技巧：通过先使用tab后统一将tab转为空格</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">this</span>\n\n<span class=\"n\">Beautiful</span> <span class=\"ow\">is</span> <span class=\"n\">better</span> <span class=\"n\">than</span> <span class=\"n\">ugly</span><span class=\"p\">.</span>\n<span class=\"n\">Explicit</span> <span class=\"ow\">is</span> <span class=\"n\">better</span> <span class=\"n\">than</span> <span class=\"n\">implicit</span><span class=\"p\">.</span>\n<span class=\"n\">Simple</span> <span class=\"ow\">is</span> <span class=\"n\">better</span> <span class=\"n\">than</span> <span class=\"nb\">complex</span><span class=\"p\">.</span>\n<span class=\"n\">Complex</span> <span class=\"ow\">is</span> <span class=\"n\">better</span> <span class=\"n\">than</span> <span class=\"n\">complicated</span><span class=\"p\">.</span>\n<span class=\"n\">Flat</span> <span class=\"ow\">is</span> <span class=\"n\">better</span> <span class=\"n\">than</span> <span class=\"n\">nested</span><span class=\"p\">.</span>\n<span class=\"n\">Sparse</span> <span class=\"ow\">is</span> <span class=\"n\">better</span> <span class=\"n\">than</span> <span class=\"n\">dense</span><span class=\"p\">.</span>\n<span class=\"n\">Readability</span> <span class=\"n\">counts</span><span class=\"p\">.</span>\n<span class=\"n\">Special</span> <span class=\"n\">cases</span> <span class=\"n\">aren</span><span class=\"s\">'t special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you'</span><span class=\"n\">re</span> <span class=\"n\">Dutch</span><span class=\"p\">.</span>\n<span class=\"n\">Now</span> <span class=\"ow\">is</span> <span class=\"n\">better</span> <span class=\"n\">than</span> <span class=\"n\">never</span><span class=\"p\">.</span>\n<span class=\"n\">Although</span> <span class=\"n\">never</span> <span class=\"ow\">is</span> <span class=\"n\">often</span> <span class=\"n\">better</span> <span class=\"n\">than</span> <span class=\"o\">*</span><span class=\"n\">right</span><span class=\"o\">*</span> <span class=\"n\">now</span><span class=\"p\">.</span>\n<span class=\"n\">If</span> <span class=\"n\">the</span> <span class=\"n\">implementation</span> <span class=\"ow\">is</span> <span class=\"n\">hard</span> <span class=\"n\">to</span> <span class=\"n\">explain</span><span class=\"p\">,</span> <span class=\"n\">it</span><span class=\"s\">'s a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let'</span><span class=\"n\">s</span> <span class=\"n\">do</span> <span class=\"n\">more</span> <span class=\"n\">of</span> <span class=\"n\">those</span><span class=\"err\">!</span>\n\n</code></pre>  </div></div>\n\n<blockquote>\n <p>Python之禅</p>\n</blockquote>\n\n<ul>\n <li>Python模块结构和布局</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># !/usr/bin/python  --&gt; 无需直接调用解释器，输入脚本名字即可执行\n# -*- coding: utf-8 -*-   --&gt; module.__doc__ 访问\n# __author__:  reworld\n</span>\n<span class=\"c1\"># (1) 起始行 ⬆\n</span>\n<span class=\"c1\">#（2）模块文档\n</span><span class=\"s\">'''this is a templete module'''</span>\n\n<span class=\"c1\"># (3) 模块导入\n</span><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"c1\"># (4) (全局)变量定义\n</span><span class=\"n\">debug</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>           <span class=\"c1\"># 除非必须  尽量使用局部变量代替全局变量 易维护节约内存\n</span>\n<span class=\"c1\"># (5) 类定义(若有)\n</span><span class=\"k\">class</span> <span class=\"nc\">FooClass</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"s\">\"Foo Class\"</span>   <span class=\"c1\"># class.__doc__ 模块被导入时\n</span>    <span class=\"k\">pass</span>\n\n<span class=\"c1\"># (6) 函数定义(若有)\n</span><span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">():</span>\n    <span class=\"s\">\"test function\"</span>  <span class=\"c1\"># function.__doc__\n</span>    <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">FooClass</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">debug</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"ran test()\"</span><span class=\"p\">)</span>\n    <span class=\"k\">pass</span>\n<span class=\"c1\"># (7) 主程序\n</span><span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>  \n    <span class=\"n\">test</span><span class=\"p\">()</span> <span class=\"c1\"># 通常调用main函数\n</span>\n</code></pre>  </div></div>\n\n<blockquote>\n <p>所有的模块都有能力执行代码，那些没有代码缩进的代码行，在模块被导入时就会执行，除了那些真正需要执行的代码以外，几乎所有的功能代码都在函数当中。</p>\n\n <p>通常只有主程序模块中有大量的顶级可执行代码，所有其他被导入模块应该只有很少的顶级执行代码，所有的功能代码都应该封装在函数或类当中</p>\n\n <p>__name__ 指示模块如何被加载</p>\n\n <ul>\n <li>如果模块是被导入 __name__ 的值是模块的名字</li>\n <li>如果模块是直接被执行的 __name__的值是 ‘<strong>__main</strong>’</li>\n <li>单元测试</li>\n </ul>\n</blockquote>\n\n<h2 id=\"内存管理\">内存管理</h2>\n\n<ul>\n <li>变量无须事先声明</li>\n <li>变量无须指定类型</li>\n <li>开发者不用关心内存管理</li>\n <li>变量名会被回收</li>\n <li>del语句能够直接释放资源</li>\n</ul>\n\n<ol>\n <li>变量定义</li>\n</ol>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<ol>\n <li>动态类型</li>\n</ol>\n\n<blockquote>\n <p>解释器根据语法和右侧的操作数决定新对象的类型</p>\n</blockquote>\n\n<ol>\n <li>引用计数</li>\n <li>del语句</li>\n</ol>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">del</span> <span class=\"n\">obj1</span><span class=\"p\">[,</span><span class=\"n\">obj2</span><span class=\"p\">[,...</span><span class=\"n\">bojN</span><span class=\"p\">]]</span>\n</code></pre>  </div></div>\n\n<h2 id=\"python程序\">Python程序</h2>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># coding=utf-8\n# !/usr/bin/python\n</span>\n<span class=\"s\">'makeTextFile.py -- create text file'</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"n\">ls</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">linesep</span> <span class=\"c1\"># 本地变量别名\n</span>\n<span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"nb\">raw_input</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">please input filename</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">all</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">Enter lines ('.' by itself to quit).</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n    <span class=\"n\">entry</span> <span class=\"o\">=</span> <span class=\"nb\">raw_input</span><span class=\"p\">(</span><span class=\"s\">\"&gt;\"</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">entry</span> <span class=\"o\">==</span> <span class=\"s\">'.'</span><span class=\"p\">:</span>\n        <span class=\"k\">break</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nb\">all</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">entry</span><span class=\"p\">)</span>\n\n<span class=\"n\">fobj</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span><span class=\"s\">'w'</span><span class=\"p\">)</span>\n<span class=\"n\">fobj</span><span class=\"p\">.</span><span class=\"n\">writelines</span><span class=\"p\">([</span><span class=\"s\">'%s%s'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">all</span><span class=\"p\">])</span>\n<span class=\"n\">fobj</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'DONE'</span><span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># !/usr/bin/python\n# -*- coding: utf-8 -*-\n# __author__:  reworld\n</span>\n\n<span class=\"s\">'readTextFile.py -- read and display text file'</span>\n\n<span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"nb\">raw_input</span><span class=\"p\">(</span><span class=\"s\">'Enter filename:'</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># try-except-else用法\n</span><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">fobj</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span><span class=\"s\">'r'</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"nb\">IOError</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"c1\"># 文件不存在已经包含在该异常内\n</span>    <span class=\"c1\"># TODO 如何做文件名打印 file:%s\n</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"*** file open error:\"</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span> <span class=\"c1\"># 此处else用法\n</span>    <span class=\"k\">for</span> <span class=\"n\">eachLine</span> <span class=\"ow\">in</span> <span class=\"n\">fobj</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">eachLine</span><span class=\"p\">)</span>\n    <span class=\"n\">fobj</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</code></pre>  </div></div>\n\n<h2 id=\"相关模块和开发工具\">相关模块和开发工具</h2>\n\n<p>调试器：pdb</p>\n\n<p>记录器：logging</p>\n\n<p>性能测试器：profile、hotshot、cProfile</p>\n\n<blockquote>\n <p>补充：性能测试工具 skyworking类似 待做Demo</p>\n</blockquote>\n\n<h2 id=\"python对象\">Python对象</h2>\n\n<p>身份：每一个对象都有一个唯一的身份标识自己，内建函数<code class=\"language-plaintext highlighter-rouge\">id()</code>来得到。</p>\n\n<p>类型：对象的类型决定了该对象可以保存什么类型的值，可以进行什么样的操作，以及遵循什么的样打的规则。内建函数<code class=\"language-plaintext highlighter-rouge\">type()</code>查看对象类型。</p>\n\n<p>值：对象表示的数据项</p>\n\n<h3 id=\"基本数据类型\">基本数据类型</h3>\n\n<ul>\n <li>数字</li>\n <li>Integer 整型</li>\n <li>Boolean 布尔型</li>\n <li>Long interger 长整型</li>\n <li>Floating point real number 浮点型</li>\n <li>Complex number 复数型</li>\n <li>String 字符串</li>\n <li>List 列表</li>\n <li>Tuple 元组</li>\n <li>Dictornary 字典</li>\n</ul>\n\n<blockquote>\n <p>所有标准对象（基本数据类型都可以用于布尔测试）</p>\n</blockquote>\n\n<h3 id=\"其他内建类型\">其他内建类型</h3>\n\n<ul>\n <li>类型</li>\n <li>Null对象（None）</li>\n <li>文件</li>\n <li>集合/固定集合</li>\n <li>函数/方法</li>\n <li>模块</li>\n <li>类</li>\n</ul>\n\n<h4 id=\"类型对象和type类型对象\">类型对象和type类型对象</h4>\n\n<p>对象的一系列固有行为和特性（比如支持哪些运算，具有哪些方法）必须事先定义好。</p>\n\n<p>类型正是保存这些信息的最佳位置。</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># 内建函数type()\n</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"nb\">type</span> <span class=\"s\">'int'</span><span class=\"o\">&gt;</span> <span class=\"c1\"># 类型对象\n</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">))</span>\n<span class=\"o\">&lt;</span><span class=\"nb\">type</span> <span class=\"s\">'type'</span><span class=\"o\">&gt;</span>\n</code></pre>  </div></div>\n\n<blockquote>\n <p>所有类型对象的类型都是type，它是所有Python类型的根和所有Python标准类的默认元类</p>\n\n <p>从Python2.2中类型统一，类就是类型，实例就是对应类型的对象</p>\n</blockquote>\n\n<h4 id=\"nonepython的null对象\">None—Python的Null对象</h4>\n\n<p>None没什么有用的属性，它的布尔值是false。</p>\n\n<h3 id=\"内部类型\">内部类型</h3>\n\n<ul>\n <li>代码</li>\n <li>帧</li>\n <li>跟踪记录</li>\n <li>切片 —&gt; 重点</li>\n <li>省略</li>\n <li>Xrange</li>\n</ul>\n\n<ol>\n <li>代码对象</li>\n</ol>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># 编译过的Python源代码片段，是可执行对象\n</span><span class=\"nb\">compile</span><span class=\"p\">()</span>  <span class=\"k\">exec</span><span class=\"p\">()</span>  <span class=\"nb\">eval</span><span class=\"p\">()</span>\n</code></pre>  </div></div>\n\n<ol>\n <li>帧对象</li>\n</ol>\n\n<p>跟踪记录对象</p>\n\n<ol>\n <li>跟踪记录对象</li>\n <li>切片对象</li>\n</ol>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># !/usr/bin/python\n# -*- coding: utf-8 -*-\n# __author__:  reworld\n</span>\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">foo_str</span> <span class=\"o\">=</span> <span class=\"s\">'abcde'</span>\n    <span class=\"c1\"># 语法sequence[起始索引:结束索引:步进值]\n</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">foo_str</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n    <span class=\"c1\"># edcba\n</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">foo_str</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n    <span class=\"c1\"># eca\n</span>\n</code></pre>  </div></div>\n\n<ol>\n <li>省略对象</li>\n</ol>\n\n<p>省略对象用于扩展切片语法，起记号作用。这个对象在切片语法表示省略号。<code class=\"language-plaintext highlighter-rouge\">sequence[...,start:end]</code></p>\n\n<ol>\n <li>XRange对象</li>\n</ol>\n\n<p>调用内建函数<code class=\"language-plaintext highlighter-rouge\">xrange()</code>会生成一个Xrange对象，<code class=\"language-plaintext highlighter-rouge\">xrange()</code>是内建函数<code class=\"language-plaintext highlighter-rouge\">range()</code>的兄弟版本，用于需要节省内存使用或<code class=\"language-plaintext highlighter-rouge\">range()</code>无法完成的超大数据集合。</p>\n\n<h3 id=\"标准类型操作符\">标准类型操作符</h3>\n\n<h4 id=\"对象值比较\">对象值比较</h4>\n\n<p>比较操作符用来判断同类型的对象是否相等，所有内建类型均支持比较运算。返回布尔值。</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># !/usr/bin/python\n# -*- coding: utf-8 -*-\n# __author__:  reworld\n</span>\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>\n\t<span class=\"c1\"># 数值类型根据数值的大小和符号比较，字符串按照字符序列值进行比较\n</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"mf\">2.46</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"c1\"># print(5+4j &lt; 2 -3j)  报错\n</span>    <span class=\"k\">print</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s\">'abc'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"s\">'abc'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n\n    <span class=\"c1\"># 多个比较操作放在同一行进行，求值顺序从左到右\n</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"mi\">3</span> <span class=\"o\">&lt;</span> <span class=\"mi\">4</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"mi\">3</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span> <span class=\"o\">&gt;</span> <span class=\"mi\">5</span> <span class=\"o\">!=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<blockquote>\n <p>对象的值在比较而非对象本身</p>\n</blockquote>\n\n<h4 id=\"对象身份比较\">对象身份比较</h4>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"n\">foo1</span> <span class=\"o\">=</span> <span class=\"mf\">4.3</span>\n    <span class=\"n\">foo2</span> <span class=\"o\">=</span> <span class=\"n\">foo1</span>\n    <span class=\"n\">foo3</span> <span class=\"o\">=</span> <span class=\"mf\">4.3</span>\n    <span class=\"n\">foo4</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mf\">3.3</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">foo1</span><span class=\"p\">),</span><span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">foo2</span><span class=\"p\">),</span><span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">foo3</span><span class=\"p\">),</span><span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">foo4</span><span class=\"p\">))</span>\n    <span class=\"n\">a</span> <span class=\"ow\">is</span> <span class=\"n\">b</span> <span class=\"o\">==&gt;</span> <span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"c1\"># 同一个对象\n</span>    <span class=\"n\">a</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">b</span> <span class=\"c1\"># 不是同一个对象\n</span>    <span class=\"c1\"># (140480586453024, 140480586453024, 140480586453024, 140480584254600)\n</span>        <span class=\"n\">foo5</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">foo6</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">foo5</span> <span class=\"ow\">is</span> <span class=\"n\">foo6</span><span class=\"p\">):</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"same obj\"</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"diff obj\"</span><span class=\"p\">)</span>\n    <span class=\"c1\"># same obj\n</span></code></pre>  </div></div>\n\n<blockquote>\n <p>整型对象和字符串对象是不可变对象，所以Python会很高效缓存它们，造成我们以为Python应该新对象时，它却没有创建对象的假象</p>\n</blockquote>\n\n<h4 id=\"布尔类型\">布尔类型</h4>\n\n<p><code class=\"language-plaintext highlighter-rouge\">not and or 优先级 not &gt; and &gt; or</code></p>\n\n<h3 id=\"标准内建函数\">标准内建函数</h3>\n\n<table>\n <thead>\n <tr>\n <th style=\"text-align: center\">函数</th>\n <th style=\"text-align: center\">功能</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td style=\"text-align: center\">cmp(obj1,obj2)</td>\n <td style=\"text-align: center\">比较obj1和obj2</td>\n </tr>\n <tr>\n <td style=\"text-align: center\">repr(obj)或`obj`（不建议）</td>\n <td style=\"text-align: center\">返回一个对象的字符串表示</td>\n </tr>\n <tr>\n <td style=\"text-align: center\">str(obj)</td>\n <td style=\"text-align: center\">返回对象适合可读性好的字符串表示</td>\n </tr>\n <tr>\n <td style=\"text-align: center\">type(obj)</td>\n <td style=\"text-align: center\">得到一个对象的类型，返回相应的type对象</td>\n </tr>\n </tbody>\n</table>\n\n<blockquote>\n <p>repr()输出对Python比较友好，str()输出对用户比较友好</p>\n</blockquote>\n\n<ul>\n <li>type()</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\t<span class=\"c1\"># !/usr/bin/python\n# -*- coding: utf-8 -*-\n# __author__:  reworld\n</span>\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">))</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">))</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">))</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">([]))</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(()))</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">({}))</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">))</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">:</span> <span class=\"k\">pass</span>\n\n    <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">()</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">))</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">))</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Bar</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span><span class=\"k\">pass</span>\n\n    <span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"n\">Bar</span><span class=\"p\">()</span>\n\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">Bar</span><span class=\"p\">),</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">))</span>\n \n<span class=\"o\">&lt;</span><span class=\"nb\">type</span> <span class=\"s\">'str'</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&lt;</span><span class=\"nb\">type</span> <span class=\"s\">'int'</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&lt;</span><span class=\"nb\">type</span> <span class=\"s\">'float'</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&lt;</span><span class=\"nb\">type</span> <span class=\"s\">'list'</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&lt;</span><span class=\"nb\">type</span> <span class=\"s\">'tuple'</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&lt;</span><span class=\"nb\">type</span> <span class=\"s\">'dict'</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&lt;</span><span class=\"nb\">type</span> <span class=\"s\">'type'</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&lt;</span><span class=\"nb\">type</span> <span class=\"s\">'classobj'</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&lt;</span><span class=\"nb\">type</span> <span class=\"s\">'instance'</span><span class=\"o\">&gt;</span>\n<span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nb\">type</span> <span class=\"s\">'type'</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">'</span><span class=\"nc\">__main__</span><span class=\"p\">.</span><span class=\"n\">Bar</span><span class=\"s\">'&gt;)  -- &gt; 注意此处结果\n</span></code></pre>  </div></div>\n\n<ul>\n <li>isinstance()</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># !/usr/bin/python\n# -*- coding: utf-8 -*-\n# __author__:  reworld\n</span>\n<span class=\"s\">\"\"\"check num type\"\"\"</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">checkNumType</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span> <span class=\"n\">num</span><span class=\"p\">,</span><span class=\"s\">\"is\"</span><span class=\"p\">,</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">long</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">)):</span>\n        <span class=\"k\">print</span> <span class=\"s\">'a number of type:'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">).</span><span class=\"n\">__name__</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span> <span class=\"s\">'not a number at all!'</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">checkNumType</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<h4 id=\"python类型操作符和内建函数总结\">Python类型操作符和内建函数总结</h4>\n\n<p><img src=\"http://img.iyzh.club/python/standardFunc.jpg\" alt=\"&quot;内建函数总结&quot;\" title=\"内建函数\" /></p>\n<h3 id=\"类型工厂函数\">类型工厂函数</h3>\n\n<p>原来所谓的内建函数转换函数，例如int(),type(),list()现在都成了工厂函数。虽然看上去有点像函数，实际上是类。调用它们的时候，实际生成该类型的一个实例，就像工厂生产货物一样。</p>\n\n<ul>\n <li>int(), long(), float(), complex()</li>\n <li>str(), unicode(), basestring()</li>\n <li>list(),tuple()</li>\n <li>type()</li>\n <li>dict()</li>\n <li>bool()</li>\n <li>set(), frozenset()</li>\n <li>object()</li>\n <li>classmethod()</li>\n <li>staticmenthod()</li>\n <li>super()</li>\n <li>property()</li>\n <li>file()</li>\n</ul>\n\n<h3 id=\"标准类型的分类\">标准类型的分类</h3>\n\n<p>标准类型：Python的“基本内建数据对象原始类型”</p>\n\n<ul>\n <li>基本 这些类型都是Python提供的标准或核心类型</li>\n <li>内建 这些类型都是Python默认提供的</li>\n <li>数据 因为它们一般是数据存储的</li>\n <li>对象 因为对象是数据和功能的默认抽象</li>\n <li>原始 因为这些类型是提供最底层的粒度数据存储</li>\n <li>类型 因为它们就是数据类型</li>\n</ul>\n\n<h3 id=\"三种模型\">三种模型</h3>\n\n<ol>\n <li>存储模型</li>\n</ol>\n\n<ul>\n <li>一个能保存单个字面对象的类型，我们称之为原子或标量存储</li>\n <li>容纳多个对象类型 容器存储</li>\n</ul>\n\n<table>\n <thead>\n <tr>\n <th>分类</th>\n <th>Python类型</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>标量/原子类型</td>\n <td>数值（所有数值类型），字符串（全部是文字）</td>\n </tr>\n <tr>\n <td>容器类型</td>\n <td>列表、元组、字典</td>\n </tr>\n </tbody>\n</table>\n\n<ol>\n <li>更新模型</li>\n</ol>\n\n<ul>\n <li>某些类型允许它们的值进行更新（对象的身份），而另一些则不允许</li>\n</ul>\n\n<table>\n <thead>\n <tr>\n <th>分类</th>\n <th>Python类型</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>可变类型</td>\n <td>列表，字典</td>\n </tr>\n <tr>\n <td>不可变类型</td>\n <td>数字、字符串、元组</td>\n </tr>\n </tbody>\n</table>\n\n<ol>\n <li>访问模型</li>\n</ol>\n\n<ul>\n <li>三种访问方式 直接存取、顺序、映射</li>\n</ul>\n\n<table>\n <thead>\n <tr>\n <th>分类</th>\n <th>Python类型</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>直接访问</td>\n <td>数字</td>\n </tr>\n <tr>\n <td>顺序访问</td>\n <td>字符串、列表、元组</td>\n </tr>\n <tr>\n <td>映射访问</td>\n <td>字典</td>\n </tr>\n </tbody>\n</table>\n\n<ul>\n <li>标准类型分类</li>\n</ul>\n\n<p><img src=\"http://img.iyzh.club/python/standardClass.jpg\" alt=\"标准类型分类\" title=\"标准分类\" /></p>\n\n<h3 id=\"github相关链接\">Github相关链接</h3>\n\n<p><a href=\"https://github.com/youzhanghao/python\">Python学习文件</a></p>\n\n<hr />\n\n","dir":"/python/","name":"2018-06-05-python语法-1.md","path":"python/2018-06-05-python语法-1.md","url":"/python/2018-06-05-python%E8%AF%AD%E6%B3%95-1.html"},{"sort":1,"last_modified_at":"2022-12-20 10:15:08 +0800","permalink":"/java/","layout":"default","title":"Java","content":"<h1 id=\"java\">Java</h1>\n\n<ul>\n <li><a href=\"/java/cacheAsspectSupport-read.html\">@Cacheable源码解读</a></li>\n <li><a href=\"/java/jedis-pool.html\">低版本中Jedis对象泄漏证明及探究</a></li>\n <li><a href=\"/java/redis-config.html\">redis配置解读</a></li>\n</ul>\n","dir":"/java/","name":"README.md","path":"java/README.md","url":"/java/"},{"sort":2,"last_modified_at":"2022-12-20 10:15:08 +0800","layout":"default","title":"数字","content":"<h1 id=\"数字\">数字</h1>\n<h2 id=\"数字-1\">数字</h2>\n\n<p>数字提供了标量贮存和直接访问。它是不可更改类型。</p>\n\n<h3 id=\"数字对象操作\">数字对象操作</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># !/usr/bin/python\n# -*- coding: utf-8 -*-\n# __author__:  reworld\n</span>\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"s\">\"\"\"数字对象\"\"\"</span>\n    <span class=\"c1\"># 创建数字对象\n</span>    <span class=\"n\">anInt</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">aLong</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"il\">55L</span>  <span class=\"c1\"># 注意用大写L\n</span>    <span class=\"n\">aFloat</span> <span class=\"o\">=</span> <span class=\"mf\">3.1415</span>\n    <span class=\"n\">aComplex</span> <span class=\"o\">=</span> <span class=\"mf\">1.23</span> <span class=\"o\">+</span> <span class=\"mf\">4.56j</span>\n    <span class=\"c1\"># 更新数字对象\n</span>    <span class=\"n\">anInt</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"c1\"># 删除数字对象\n</span>    <span class=\"k\">del</span> <span class=\"n\">anInt</span>\n</code></pre>  </div></div>\n\n<blockquote>\n <p>repr()函数有机会看到“L”，str()函数看不到“L”</p>\n</blockquote>\n\n<h3 id=\"复数\">复数</h3>\n\n<ul>\n <li>虚数不能单独存在，它总是和一个值为0.0的实数部分一起构成一个复数</li>\n <li>复数由实数部分和虚数部分构成</li>\n <li>表示虚数的语法：real+imagj</li>\n <li>实数部分和虚数部分都是浮点型</li>\n <li>虚数部分必须有后缀j或J</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">num</span><span class=\"p\">.</span><span class=\"n\">real</span> <span class=\"c1\"># 实部\n</span><span class=\"n\">num</span><span class=\"p\">.</span><span class=\"n\">imag</span> <span class=\"c1\"># 虚部\n</span><span class=\"n\">num</span><span class=\"p\">.</span><span class=\"n\">conjugate</span><span class=\"p\">()</span> <span class=\"c1\"># 返回该复数的共轭复数\n</span></code></pre>  </div></div>\n\n<h3 id=\"混合模式操作符\">混合模式操作符</h3>\n\n<p><strong><code class=\"language-plaintext highlighter-rouge\">coerce()</code></strong></p>\n\n<ul>\n <li>如果有一个操作数是复数，另一个操作数被转换为复数</li>\n <li>否则，如果有一个操作数是浮点型，另一个操作数被转换为长整型</li>\n <li>否则，如果有一个操作数是长整型，则另一个操作数被转换为长整型</li>\n <li>否则，两者必然都是普通类型，无须类型转换</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># __author__:  reworld\n# from __future__ import division\n</span>\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"c1\"># 现阶段地板除 未来移除\n</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># 0  __future__  0.5\n</span>    <span class=\"k\">print</span><span class=\"p\">(</span> <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"mf\">2.0</span><span class=\"p\">)</span> <span class=\"c1\"># 0.5\n</span>    <span class=\"c1\"># // 执行地板除  返回比真正商小的最小整数\n</span>    <span class=\"k\">print</span><span class=\"p\">(</span> <span class=\"mi\">1</span> <span class=\"o\">//</span> <span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># 0\n</span>    <span class=\"k\">print</span><span class=\"p\">(</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">//</span> <span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># -1\n</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span> <span class=\"mf\">1.0</span> <span class=\"o\">%</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"c1\"># 浮点数的取余  x - (math.floor(x/y) * y)\n</span>    <span class=\"k\">print</span><span class=\"p\">(</span> <span class=\"mf\">4.8</span> <span class=\"o\">%</span> <span class=\"mf\">3.2</span><span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<p><img src=\"http://img.iyzh.club/python/numConver.jpg\" alt=\"数值类型转换\" /></p>\n\n<p><strong>操作符优先级</strong></p>\n\n<p><em>从上至下，计算优先级依次降低</em></p>\n\n<p><img src=\"http://img.iyzh.club/python/intOperation.jpg\" alt=\"操作符优先级\" /></p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"c1\"># 优先级 **\n</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">3</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">((</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"o\">**-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># -3\n</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"o\">+</span><span class=\"mf\">1j</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># -1+0j\n</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mf\">1j</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># 0j\n</span>    <span class=\"k\">print</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mf\">1j</span><span class=\"p\">)</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># 2j\n</span></code></pre>  </div></div>\n\n<p><strong>位操作符(只适用于整型)</strong></p>\n\n<p>用于计算存储单位</p>\n\n<p><img src=\"http://img.iyzh.club/python/intBiteOpr.jpg\" alt=\"整型位操作符\" /></p>\n\n<p><strong>数值工厂函数</strong></p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">bool(obj) int(obj) long(obj) float(obj) complex(str)</code></p>\n\n<p><strong>功能函数</strong></p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># !/usr/bin/python\n# -*- coding: utf-8 -*-\n# __author__:  reworld\n</span>\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># 取绝对值\n</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mf\">1.0j</span><span class=\"p\">))</span>\n    <span class=\"c1\"># 1\n</span>    <span class=\"c1\"># 1.41421356237\n</span>\n    <span class=\"c1\"># 自定义两个数值类型转换\n</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">coerce</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">coerce</span><span class=\"p\">(</span><span class=\"mf\">1.3</span><span class=\"p\">,</span> <span class=\"il\">13L</span><span class=\"p\">))</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">coerce</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"il\">134L</span><span class=\"p\">))</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">coerce</span><span class=\"p\">(</span><span class=\"mf\">1j</span><span class=\"p\">,</span><span class=\"il\">134L</span><span class=\"p\">))</span>\n    <span class=\"c1\"># (1, 2)\n</span>    <span class=\"c1\"># (1.3, 13.0)\n</span>    <span class=\"c1\"># (1L, 134L)\n</span>    <span class=\"c1\"># (1j, (134 + 0j))\n</span>\n    <span class=\"c1\"># divmod()  返回包含商和余数的元组\n</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">divmod</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">divmod</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">divmod</span><span class=\"p\">(</span><span class=\"mf\">2.5</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">divmod</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"mf\">1j</span><span class=\"p\">,</span><span class=\"mf\">0.5</span><span class=\"o\">-</span><span class=\"mf\">1j</span><span class=\"p\">))</span>\n    <span class=\"c1\"># (0, 1)\n</span>    <span class=\"c1\"># (3, 1)\n</span>    <span class=\"c1\"># (0.0, 2.5)\n</span>    <span class=\"c1\"># ((-0 + 0j), (2 + 1j))\n</span>\n    <span class=\"c1\"># pow() pow(x,y,z) 密码 做取余运算\n</span>    <span class=\"c1\">#     With two arguments, equivalent to x**y.  With three arguments,\n</span>    <span class=\"c1\">#     equivalent to (x**y) % z, but may be more efficient (e.g. for longs).\n</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">pow</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">))</span>  <span class=\"c1\"># 1\n</span>    \n    <span class=\"c1\"># round() 四舍五入 第二个参数精确位数\n</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"mf\">3.4999</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"c1\"># 3.5\n</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">3.5</span><span class=\"p\">))</span> <span class=\"c1\"># -4.0\n</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">3.4</span><span class=\"p\">))</span> <span class=\"c1\"># -3.0\n</span>    \n    \n</code></pre>  </div></div>\n\n<blockquote>\n <ul>\n <li>int()直接截去小数部分，返回整型</li>\n <li>floor() 最接近原数但小于原数的整型 返回值为浮点型</li>\n <li>round() 最接近原数的整型 返回值为浮点型</li>\n </ul>\n</blockquote>\n\n<p><strong>仅适用整型的内建函数</strong></p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">hex</code> 数字转16进制</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">oct</code> 数字转8进制</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">chr \t</code> ASCII值转为ASCII字符</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">ord </code> 接受一个ASCII或unicode字符（长度为1字符串），返回相应的ASCII或unicode值</p>\n\n<p><strong>相关模块</strong></p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">decimal</code> 十进制浮点运算符</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">array </code> 高效数值数组（字符，整型、浮点型等）</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">math/cmath</code> 常规数学运算在math模块，复数cmath模块</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">operator</code> 数字操作符的函数实现</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">random</code> 多种随机数生成器</p>\n\n<p><em>常用random</em></p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">randint() </code> 两个整型参数，返回两者之间的随机整型</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">randrange()</code> 同range()参数，随机返回range(start,stop,step)其中一项</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">uniform()</code> 类似randint()，返回二者之间的浮点型（不含范围上限）</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">random()</code> 类似于uniform, 下限恒等于0，上限恒等于1</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">choice()</code> 随机返回给定序列的一个元素</p>\n\n<hr />\n\n","dir":"/python/","name":"2018-06-07-python语法-2.md","path":"python/2018-06-07-python语法-2.md","url":"/python/2018-06-07-python%E8%AF%AD%E6%B3%95-2.html"},{"sort":3,"last_modified_at":"2022-12-20 10:15:08 +0800","permalink":"/python/","layout":"default","title":"Python","content":"<h1 id=\"python\">Python</h1>\n\n<ul>\n <li><a href=\"/python/2018-06-05-python%E8%AF%AD%E6%B3%95-1.html\">变量与基本类型</a></li>\n <li><a href=\"/python/2018-06-07-python%E8%AF%AD%E6%B3%95-2.html\">数字</a></li>\n <li><a href=\"/python/2018-06-10-python%E8%AF%AD%E6%B3%95-3.html\">序列字符串</a></li>\n</ul>\n","dir":"/python/","name":"README.md","path":"python/README.md","url":"/python/"},{"sort":3,"last_modified_at":"2022-12-20 10:15:08 +0800","layout":"default","title":"序列字符串","content":"<h1 id=\"序列字符串\">序列字符串</h1>\n<h2 id=\"序列\">序列</h2>\n\n<p>序列：成员有序排列，并可以通过下标偏移量访问到它的一个或几个成员。</p>\n\n<blockquote>\n <p>字符串、列表和元组</p>\n</blockquote>\n\n<h3 id=\"序列操作符\">序列操作符</h3>\n\n<table>\n <thead>\n <tr>\n <th>序列操作符</th>\n <th>作用</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>seq[ind]</td>\n <td>获得下标为ind的元素</td>\n </tr>\n <tr>\n <td>seq[ind1:ind2]</td>\n <td>获得下标从ind1到ind2的元素集合</td>\n </tr>\n <tr>\n <td>seq*expr</td>\n <td>序列重复expr次</td>\n </tr>\n <tr>\n <td>seq1+seq2</td>\n <td>连接序列seq1和seq2</td>\n </tr>\n <tr>\n <td>obj in seq</td>\n <td>判断obj元素是否含在seq中</td>\n </tr>\n <tr>\n <td>obj not in seq</td>\n <td>判断obj元素是否不包含在seq中</td>\n </tr>\n </tbody>\n</table>\n\n<ol>\n <li>成员关系操作符（in、not in）</li>\n <li>连接操作符 （+）</li>\n <li>重复操作符 （*）</li>\n <li>切片操作符 （[],[:],[::]）</li>\n</ol>\n\n<blockquote>\n <p>切片：通过下标范围来获取一组序列元素的访问方式</p>\n\n <p>索引可以为正或负值 负从结束点起始 [:] \\ [::]</p>\n\n <p>单索引 []不可越界</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">print</span> <span class=\"p\">(</span><span class=\"s\">\"faye\"</span><span class=\"p\">,</span><span class=\"s\">'len'</span><span class=\"p\">,</span><span class=\"s\">'day'</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span>  <span class=\"c1\"># 面向对象  所以无须设置变量\n</span><span class=\"n\">sequence</span><span class=\"p\">(</span><span class=\"n\">starting_index</span><span class=\"p\">:)</span>  <span class=\"c1\"># 默认至结束\n</span><span class=\"n\">sequence</span><span class=\"p\">(:</span><span class=\"n\">ending_index</span><span class=\"p\">)</span>  <span class=\"c1\"># 默认从起始位\n</span><span class=\"n\">sequence</span><span class=\"p\">(</span><span class=\"n\">starting_index</span><span class=\"p\">:</span><span class=\"n\">ending_index</span><span class=\"p\">)</span>\n<span class=\"n\">sequence</span><span class=\"p\">(</span><span class=\"n\">starting_index</span><span class=\"p\">:</span><span class=\"n\">ending_index</span><span class=\"p\">:</span><span class=\"n\">step</span><span class=\"p\">)</span> <span class=\"c1\"># step 步进值\n</span></code></pre>  </div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># !/usr/bin/python\n# -*- coding: utf-8 -*-\n# __author__:  Rewrite\n</span>\n<span class=\"k\">def</span> <span class=\"nf\">cutLastChr</span><span class=\"p\">(</span><span class=\"n\">char</span><span class=\"o\">=</span><span class=\"s\">\"test\"</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\"每次截取字符串最后一位输出\"\"\"</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">char</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span>\n    <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">char</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span><span class=\"c1\"># 输出完整字符串  for i in [None] + range(-1,len(char),1)\n</span>        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">char</span><span class=\"p\">[:</span><span class=\"n\">i</span><span class=\"p\">])</span>\n\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">test_char</span> <span class=\"o\">=</span> <span class=\"s\">'abcde'</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">test_char</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>  <span class=\"c1\"># 左闭右开\n</span>    <span class=\"n\">cutLastChr</span><span class=\"p\">(</span><span class=\"n\">test_char</span><span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<h3 id=\"内建函数\">内建函数</h3>\n\n<p>序列类型转换工厂函数</p>\n\n<table>\n <thead>\n <tr>\n <th>函数</th>\n <th>含义</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>list(iter)</td>\n <td>把可迭代对象转换为列表</td>\n </tr>\n <tr>\n <td>str(obj)</td>\n <td>把obj对象转换为字符串（对象的字符串表示方法）</td>\n </tr>\n <tr>\n <td>unicode(obj)</td>\n <td>把对象转为unicode字符串(使用默认编码)</td>\n </tr>\n <tr>\n <td>basestring()</td>\n <td>抽象工厂函数，其作用仅仅是str和unicode父类,不能实例化</td>\n </tr>\n <tr>\n <td>tuple(str)</td>\n <td>把一个可迭代对象转换为一个元组对象</td>\n </tr>\n </tbody>\n</table>\n\n<blockquote>\n <p>可迭代对象 推荐阅读：<a href=\"https://eastlakeside.gitbooks.io/interpy-zh/content/Generators/\">Python进阶之生成器</a></p>\n\n <p>浅拷贝与深拷贝 浅只做引用的变更</p>\n</blockquote>\n\n<p>可用内建函数</p>\n\n<p><img src=\"http://img.iyzh.club/python/seqFunc.jpg\" alt=\"序列类型可用的内建函数\" /></p>\n\n<h3 id=\"字符串\">字符串</h3>\n\n<p>基本操作</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># !/usr/bin/python\n# -*- coding: utf-8 -*-\n# __author__:  Rewrite\n</span>\n<span class=\"k\">def</span> <span class=\"nf\">intString</span><span class=\"p\">():</span>\n    <span class=\"n\">aString</span> <span class=\"o\">=</span> <span class=\"s\">'hello world'</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">aString</span><span class=\"p\">)</span>\n    <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n    <span class=\"c1\"># b[2] = aString  单个字符你只能做访问操作  因其不可变性\n</span>    <span class=\"c1\"># del b[3]\n</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>\n    <span class=\"n\">aString</span> <span class=\"o\">=</span> <span class=\"s\">''</span>\n    <span class=\"k\">del</span> <span class=\"n\">b</span>\n<span class=\"k\">def</span> <span class=\"nf\">compareString</span><span class=\"p\">():</span>\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"s\">'afc'</span>\n    <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"s\">'aef'</span>\n    <span class=\"c1\"># ord(chr) 获取Ascii chr(asc) 获取对应字符\n</span>    <span class=\"c1\"># 比较 从第一位开始比较ASCII 相同则继续往下一位比较\n</span>    <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"n\">b</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'a &lt; b'</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'a &gt;= b'</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">intString</span><span class=\"p\">()</span>\n</code></pre>  </div></div>\n\n<p>拼接建议使用如下：</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">conncetString</span><span class=\"p\">():</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'%s %s'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"s\">'Spanish'</span><span class=\"p\">,</span><span class=\"s\">'China'</span><span class=\"p\">))</span>\n    <span class=\"c1\"># Spanish China\n</span>    <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s\">' '</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">((</span><span class=\"s\">'Spanish'</span><span class=\"p\">,</span><span class=\"s\">'China'</span><span class=\"p\">)).</span><span class=\"n\">upper</span><span class=\"p\">()</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n    <span class=\"c1\"># SPANISH CHINA\n</span>    <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"s\">'hello'</span> <span class=\"s\">'world'</span>\n    <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s\">'http://'</span>\n         <span class=\"s\">'localhost'</span>\n         <span class=\"s\">':8000'</span>\n         <span class=\"s\">'/cgi-bin/friend.py'</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n    <span class=\"c1\"># http://localhost:8000/cgi-bin/friend.py\n</span>    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"s\">'您好'</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<h3 id=\"只适用于字符串的操作符\">只适用于字符串的操作符</h3>\n\n<p><strong>格式化操作符（%）</strong></p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">'%(格式化符号)[格式化辅助指令]'%(变量) </code></p>\n\n<ul>\n <li>字符串格式化符号</li>\n</ul>\n\n<p><img src=\"http://img.iyzh.club/python/stringFormatSymbol.jpg\" alt=\"字符串格式化符号\" /></p>\n\n<ul>\n <li>格式化操作符辅助指令</li>\n</ul>\n\n<p><img src=\"http://img.iyzh.club/python/stringFormatAssit.jpg\" alt=\"格式化操作符辅助指令\" /></p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">stringFormat</span><span class=\"p\">():</span>\n    <span class=\"c1\">#  元组类型的参数作为转换\n</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"MM/DD/YY = %02d/%02d/%d\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">67</span><span class=\"p\">))</span>\n    <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"s\">'Web'</span><span class=\"p\">,</span> <span class=\"s\">'page'</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'http://xxx.yyy.zzz/%s/%s.html'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">))</span>\n    <span class=\"c1\"># MM / DD / YY = 02 / 15 / 67\n</span>    <span class=\"c1\"># http: // xxx.yyy.zzz / Web / page.html\n</span>    <span class=\"c1\"># 字典类型的参数提供给格式化操作符\n</span>    <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s\">'There are %(howmany)d %(lang)s Quotation Symbols '</span> <span class=\"o\">%</span> \\\n        <span class=\"p\">{</span><span class=\"s\">'lang'</span><span class=\"p\">:</span><span class=\"s\">'Python'</span><span class=\"p\">,</span><span class=\"s\">'howmany'</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n    <span class=\"c1\"># There are 3 Python Quotation Symbols\n</span></code></pre>  </div></div>\n\n<blockquote>\n <p>str()与repr()调试</p>\n</blockquote>\n\n<p><strong>字符串模板</strong></p>\n\n<p>优点：无须知道替换的字段类型</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">substitute</code> <code class=\"language-plaintext highlighter-rouge\">safe_substitute</code></p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"c1\"># 注意此处犯了一个错误，文件命名为string.py 导致找不到template  文件命名不要和内建模块重名\n</span>    <span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"n\">Template</span><span class=\"p\">(</span><span class=\"s\">'There are ${howmany} ${lang} Quotation Symbols '</span><span class=\"p\">)</span>\n    <span class=\"c1\"># key不存在 keyError异常\n</span>    <span class=\"n\">s3</span> <span class=\"o\">=</span>  <span class=\"n\">s2</span><span class=\"p\">.</span><span class=\"n\">substitute</span><span class=\"p\">(</span><span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s\">'Python'</span><span class=\"p\">,</span><span class=\"n\">howmany</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">s3</span><span class=\"p\">)</span>\n    <span class=\"c1\"># There are 3 Python Quotation Symbols\n</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">s2</span><span class=\"p\">.</span><span class=\"n\">safe_substitute</span><span class=\"p\">(</span><span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s\">'python'</span><span class=\"p\">))</span>\n    <span class=\"c1\"># There are ${howmany} python Quotation Symbols \n</span>\n</code></pre>  </div></div>\n\n<p><strong>原始字符串(r/R)</strong></p>\n\n<p>在原始字符串里，所有低字符都是直接按照字面的意思来使用，没有转义或不能打印的字符。</p>\n\n<p>使用：在原始字符串字符号前加<code class=\"language-plaintext highlighter-rouge\">r或R</code></p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># !/usr/bin/python\n# -*- coding: utf-8 -*-\n# __author__:  Reworld\n</span><span class=\"kn\">import</span> <span class=\"nn\">re</span>\n \n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"c1\"># 原始字符串的使用 r或R\n</span>    <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"s\">'</span><span class=\"se\">\\\\</span><span class=\"s\">[rtfvn]'</span><span class=\"p\">,</span> <span class=\"s\">r'hello world\\n'</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">m</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span> <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">group</span><span class=\"p\">())</span> <span class=\"c1\"># 空\n</span>    <span class=\"n\">m2</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"s\">r'\\\\[rtfvn]'</span><span class=\"p\">,</span> <span class=\"s\">r'hello world\\n'</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">m2</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span> <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">m2</span><span class=\"p\">.</span><span class=\"n\">group</span><span class=\"p\">())</span> <span class=\"c1\"># \\n\n</span></code></pre>  </div></div>\n\n<p><em>Unicode字符串操作符(u/U)</em></p>\n\n<p>内建函数</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># !/usr/bin/python\n# -*- coding: utf-8 -*-\n# __author__:  Reworld\n</span>\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">str1</span> <span class=\"o\">=</span> <span class=\"s\">'abc'</span>\n    <span class=\"n\">str2</span> <span class=\"o\">=</span> <span class=\"s\">'lmn'</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">cmp</span><span class=\"p\">(</span><span class=\"n\">str1</span><span class=\"p\">,</span> <span class=\"n\">str2</span><span class=\"p\">))</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">cmp</span><span class=\"p\">(</span><span class=\"s\">'abc'</span><span class=\"p\">,</span><span class=\"s\">'gef'</span><span class=\"p\">))</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">str1</span><span class=\"p\">))</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">str2</span><span class=\"p\">),</span><span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">str2</span><span class=\"p\">))</span>\n    <span class=\"c1\"># -1\n</span>    <span class=\"c1\"># -1\n</span>    <span class=\"c1\"># 3\n</span>    <span class=\"c1\"># ('n', 'l')\n</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">str2</span><span class=\"p\">):</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"n\">s</span><span class=\"p\">,</span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"s\">'abc'</span><span class=\"p\">,</span><span class=\"s\">'123'</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"n\">t</span><span class=\"p\">))</span>\n    <span class=\"c1\"># (0, 'l')\n</span>    <span class=\"c1\"># (1, 'm')\n</span>    <span class=\"c1\"># (2, 'n')\n</span>    <span class=\"c1\"># [('a', '1'), ('b', '2'), ('c', '3')]\n</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"s\">u'</span><span class=\"se\">\\0</span><span class=\"s\">xAb'</span><span class=\"p\">,</span><span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'true'</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'false'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"s\">u''</span><span class=\"p\">,</span><span class=\"nb\">basestring</span><span class=\"p\">))</span>\n    <span class=\"c1\"># false\n</span>    <span class=\"c1\"># True\n</span>\n    <span class=\"k\">print</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"mi\">65</span><span class=\"p\">)</span> <span class=\"c1\"># 0-255\n</span>    <span class=\"k\">print</span> <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'A'</span><span class=\"p\">)</span> <span class=\"c1\"># 一个字符作为参数\n</span>    <span class=\"k\">print</span> <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">u'</span><span class=\"se\">\\u2345</span><span class=\"s\">'</span><span class=\"p\">)</span>\n    <span class=\"c1\"># A \n</span>    <span class=\"c1\"># 65 ascii值\n</span>    <span class=\"c1\"># 9029 unicode数值\n</span></code></pre>  </div></div>\n\n<p><em>字符串函数</em></p>\n\n<h3 id=\"字符串的独特特性\">字符串的独特特性</h3>\n\n<p><strong>特殊字符串与控制字符</strong></p>\n\n<p>特殊字符：包括反斜杠转义、可以直接用ASCII码来标示特殊字符</p>\n\n<p><img src=\"http://img.iyzh.club/python/specString.jpg\" alt=\"反斜杠开头的转义符\" /></p>\n\n<p>控制字符：不常用，不可打印的ASCII码值来做定界符。用做字符串里面的定界符。</p>\n\n<p><strong>三引号</strong></p>\n\n<p>允许一个字符串跨多行，字符串可以包含换行符、制表符以及其他特殊字符。通常是一对连续的单引号或双引号（<code class=\"language-plaintext highlighter-rouge\">'''test'''</code>、<code class=\"language-plaintext highlighter-rouge\">\"\"\"test\"\"\"</code>）。所见即所得。</p>\n\n<p>HTML和SQL</p>\n\n<p><strong>字符串不可变性</strong></p>\n\n<hr />\n\n","dir":"/python/","name":"2018-06-10-python语法-3.md","path":"python/2018-06-10-python语法-3.md","url":"/python/2018-06-10-python%E8%AF%AD%E6%B3%95-3.html"},{"sort":4,"last_modified_at":"2022-12-20 10:15:08 +0800","permalink":"/questions/","layout":"default","title":"问题集","content":"<h1 id=\"问题集\">问题集</h1>\n\n<ul>\n <li><a href=\"/questions/jedis-pool-qa.html\">无法从Redis池中获取连接</a></li>\n</ul>\n","dir":"/questions/","name":"README.md","path":"questions/README.md","url":"/questions/"},{"sort":5,"last_modified_at":"2022-12-20 10:15:08 +0800","permalink":"/tool/","layout":"default","title":"工具","content":"<h1 id=\"工具\">工具</h1>\n\n<ul>\n <li><a href=\"/tool/redis-stat.html\">redis-stat</a></li>\n <li><a href=\"/tool/ab.html\">ab</a></li>\n <li><a href=\"/tool/idea-jar-debug.html\">Idea中引入源码包调试</a></li>\n <li><a href=\"/tool/idea-plugin.html\">Idea常用插件及安装</a></li>\n <li><a href=\"/tool/idea-remote-debug.html\">Idea远程调试</a></li>\n <li><a href=\"/tool/jekyll.html\">Jekyll</a></li>\n <li><a href=\"/tool/maven-dependency.html\">maven依赖管理</a></li>\n</ul>\n\n","dir":"/tool/","name":"README.md","path":"tool/README.md","url":"/tool/"},{"sort":6,"last_modified_at":"2022-12-20 10:15:08 +0800","permalink":"/others/","layout":"default","title":"其他","content":"<h1 id=\"其他\">其他</h1>\n\n<ul>\n <li><a href=\"/others/2018-06-03-markdown.html\">Markdown</a></li>\n <li><a href=\"/others/github-push.html\">Github Pages</a></li>\n <li><a href=\"/others/jekyll-install.html\">Jekyll安装</a></li>\n</ul>\n","dir":"/others/","name":"README.md","path":"others/README.md","url":"/others/"}]